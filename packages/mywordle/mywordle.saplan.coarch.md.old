# MyWordle Application Architecture

## Product Idea
Create an application for the MyWordle game.

## Directions for Software Developer
- Define a plan to implement the product
- Encapsulate each component in a separate module
- Define APIs for each component
- Ensure components are loosely coupled and easily tested

## Language and Framework
- Language: Python
- Framework: None (command-line application)

## Directory Structure
- mywordle/
  - main.py
  - game.py
  - wordlist.py
  - utils.py

## Invariants
- The word must be 5 letters long
- The player has a maximum of 6 attempts
- The word list must contain valid English words

## Components

### main.py
- Imports: `game`, `wordlist`, `utils`
- Exports: None
- API: `main()`
- Description: Entry point of the application. Initializes the game, handles user input, and displays the game state.

### game.py
- Imports: None
- Exports: `Game`
- API: `Game`, `Game.start()`, `Game.guess(word: str) -> str`, `Game.is_over() -> bool`, `Game.is_won() -> bool`
- Description: Encapsulates the game logic. Initializes a new game, processes guesses, and checks the game state.

### wordlist.py
- Imports: None
- Exports: `WordList`
- API: `WordList`, `WordList.get_random_word() -> str`
- Description: Manages the word list. Loads words from a file, validates them, and provides a random word for the game.
- Assume the word list is a text file with one word per line in a file called "dictionary.txt"

### utils.py
- Imports: None
- Exports: `display_instructions()`, `validate_input(word: str) -> bool`
- Description: Contains utility functions for displaying instructions and validating user input.

## Command Line Client
- Usage: `python main.py`
- Description: Starts the MyWordle game, displays instructions, and prompts the user for input. The game continues until the player wins or runs out of attempts.