{"sha":"de503a40221e1a84bfaefa40097333f004c2d18492f95ed1b48529e8e0e8e65c","key":{"template":{"id":"slides","title":"Generate Slides"},"fragment":{"fullId":"README.md.gpspec.md:0:0","hash":"f853854a0efa414d"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/sample/README.md.slides.md","filename":"/workspaces/coarch/packages/sample/README.md.slides.md","type":"createfile","text":"### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n","overwrite":true}],"fileEdits":{"/workspaces/coarch/packages/sample/README.md.slides.md":{"before":null,"after":"### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n"}},"trace":"\n# `slides` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-YICTPL`\n\n-   env.**file**\n```js\n{ filename: \"README.md.gpspec.md\",\nlabel: \"current\",\ncontent: \"# README.md\\n\\n-   [README.md](./README.md)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"README.md\",\n  filename: \"README.md\",\n  content: \"# GPTools - AI-Enhanced Workflows for Teams\\n\\nGPTools (former\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... }... ]\n```\n\n-   env.**template**\n```js\n{ id: \"slides\",\ntitle: \"Generate Slides\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Generate Slides\\\",\\n    description: \\\"Gen\"...,\ndescription: \"Generate a slidedeck in markdown. Install extension 'vscode-\"...,\ncategories: [ \"samples\" ],\ntemperature: 0.1,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.explanations` source\n\n```js\nsystem({ title: \"Explain your answers\" })\n$`When explaining answers, take a deep breath.`\n```\n#### expanded\n``````markdown\nWhen explaining answers, take a deep breath.\n``````\n###  `system.files` source\n\n```js\nsystem({\n    title: \"File generation\",\n    description: \"Teaches the file format supported by GPTools\",\n})\n\nconst folder =\n    env.vars[\"outputFolder\"] || env.template.outputFolder\n$`When generating or updating files you will use the following syntax:`\n\ndef(\n    `File ${folder || \".\"}/file1.ts`,\n    `What goes in\\n${folder || \".\"}/file1.ts.`,\n    { language: \"typescript\" }\n)\ndef(\n    `File ${folder || \".\"}/file1.py`,\n    `What goes in\\n${folder || \".\"}/file1.py.`,\n    { language: \"python\" }\n)\ndef(\n    `File /path_to_file/file2.md`,\n    `What goes in\\n/path_to_file/file2.md.`,\n    { language: \"markdown\" }\n)\n\n$`Make sure to use precisely ${env.fence} to guard file code sections.`\n$`Make sure to use precisely ${env.markdownFence} to guard file markdown sections.`\n$`Use full path of filename in code section header.`\nif (folder) $`When generating new files, place files in folder \"${folder}\".`\n$`If a file does not have changes, do not regenerate.`\n```\n#### expanded\n``````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Generate Slides\",\n    description: \"Generate a slidedeck in markdown. Install extension 'vscode-reveal'.\",\n    categories: [\"samples\"],\n    temperature: 0.1,\n})\n\nconst output = env.file.filename.replace(/\\.gpspec\\.md$/, \".slides.md\")\ndef(\n    \"SOURCE\",\n    [env.file,\n    ...env.links.filter(\n        (f) => !f.filename.endsWith(\".slides.md\")\n    )]\n)\n\n$`Generate a slidedeck in markdown format for the content in SOURCE\nin file ${output} using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n`\n```\n\n\n</details>\n\n\n<details id=\"expanded-prompt\"><summary>expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.1\n-  max tokens: 800\n\n``````markdown\nSOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Enhanced Workflows for Teams\n\nGPTools (formerly CoArch) is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts (gptools) to support their workflows. The framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Key Objectives and Technical Elements\n\nThe main objectives of gptools are to improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts.\nThe key elements of the gptools framework are:\n\n-   [gptools](./docs/gptools.md): Scripts that integrate traditional code and natural language, leveraging foundation models in their execution.\n-   [gpspecs](./docs/gpspecs.md): Natural language documents that instantiate gptools in a particular context.\n-   [VS Code extension](./packages/vscode/README.md): Supporting seamless user interaction with gptools.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools access AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n## Install manually\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification.\n\n```markdown A sample GPSpec document.\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nFile ./README.md.slides.md:\n`````\n### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n`````\n\nSUMMARY:\n```\nThe README.md file was converted into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck includes brief summaries of each section in the README.md file, along with relevant code snippets and diagrams.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `File ./README.md.slides.md`\n`````md\n### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n\n`````\n\n-   `SUMMARY`\n`````\nThe README.md file was converted into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck includes brief summaries of each section in the README.md file, along with relevant code snippets and diagrams.\n\n`````\n\n\n</details>\n","text":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n`````\n\nSUMMARY:\n```\nThe README.md file was converted into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck includes brief summaries of each section in the README.md file, along with relevant code snippets and diagrams.\n```","summary":"The README.md file was converted into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck includes brief summaries of each section in the README.md file, along with relevant code snippets and diagrams.\n"}}}
