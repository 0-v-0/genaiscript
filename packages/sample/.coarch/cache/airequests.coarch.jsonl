{"sha":"0d7cceb16e5f8e9a9eff57a5819e601e9a08ef1a13cb4ea8ab1e9207461136bc","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/image.coarch.md:11:0","hash":"a1e9101b18b16b54"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/image.coarch.md","filename":"/workspaces/coarch/packages/sample/src/image.coarch.md","type":"replace","range":[[0,0],[38,0]],"text":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/image.coarch.md":{"before":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n","after":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-QORIFT`\n\n-   env.**links**\n```````````````js\n[ { label: \"node\",\n  filename: \"src/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... },\n{ label: \"genfiles.node/image.mjs\",\n  filename: \"src/genfiles.node/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/image.coarch.md\",\nlabel: \"current\",\ncontent: \"---\\ntitle: Image Resize Command Line Application\\ndescription\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./image.coarch.md`\n`````md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n\n`````\n\n","text":"File ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````","summary":""}}}
{"sha":"0d7cceb16e5f8e9a9eff57a5819e601e9a08ef1a13cb4ea8ab1e9207461136bc","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/image.coarch.md:11:0","hash":"a1e9101b18b16b54"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/image.coarch.md","filename":"/workspaces/coarch/packages/sample/src/image.coarch.md","type":"replace","range":[[0,0],[38,0]],"text":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/image.coarch.md":{"before":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n","after":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-IELEWU`\n\n-   env.**links**\n```````````````js\n[ { label: \"node\",\n  filename: \"src/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... },\n{ label: \"genfiles.node/image.mjs\",\n  filename: \"src/genfiles.node/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/image.coarch.md\",\nlabel: \"current\",\ncontent: \"---\\ntitle: Image Resize Command Line Application\\ndescription\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./image.coarch.md`\n`````md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n\n`````\n\n","text":"File ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````","summary":"Corrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n"}}}
{"sha":"22d5795ecf5f5cc76d584760687ce8ecdfca432a47efc431b1be93f537b17506","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/tennis.coarch.md:0:0","hash":"b90b8ef0f789588a"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/tennis.coarch.md","filename":"/workspaces/coarch/packages/sample/src/tennis.coarch.md","type":"replace","range":[[0,0],[4,0]],"text":"# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/tennis.coarch.md":{"before":"# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n","after":"# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/tennis.coarch.md\n# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-TISDGM`\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/tennis.coarch.md\",\nlabel: \"current\",\ncontent: \"# Tennis score app\\n\\nThe web application allows a user to ent\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/tennis.coarch.md\n# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./tennis.coarch.md:\n`````\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./tennis.coarch.md`\n`````md\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n\n`````\n\n","text":"File ./tennis.coarch.md:\n`````\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n`````","summary":"Corrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n"}}}
{"sha":"08c85d8bb6ce32ee1d54b7787641fdde08ad7cd33bfbcfe30b177333938f3591","key":{"template":{"id":"screenplay","title":"A dialog generator for descript"},"fragment":{"fullId":"src/demovideo.gpspec.md:0:0","hash":"cb63b807d7faa3c6"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/sample/src/demovideo.dialog.md","filename":"/workspaces/coarch/packages/sample/src/demovideo.dialog.md","type":"createfile","text":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n","overwrite":true},{"label":"A dialog generator for descript","filename":"/workspaces/coarch/packages/sample/src/demovideo.gpspec.md","type":"insert","pos":[2,63],"text":"\n-   [demovideo.dialog.md](demovideo.dialog.md)"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/demovideo.dialog.md":{"before":null,"after":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"A dialog generator for descript\" (`screenplay`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"A dialog generator for descript\",\n  3:     description:\n  4:         \"Given a description of scenes, generate a dialog between two avatar characters.\",\n  5: })\n  6: \n  7: const output = env.file.filename.replace(\".gpspec.md\", \".dialog.md\")\n  8: def(\n  9:     \"DIALOG\",\n 10:     env.links.filter((f) => f.filename.endsWith(\".dialog.md\"))\n 11: )\n 12: def(\"SCENES\", env.file)\n 13: \n 14: $`You are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\n 15: between the two anchors, similarly to sports commentators.\n 16: \n 17: The subject is a screen recording of a software tool that needs to be described.\n 18: \n 19: SCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file ${output} formatted as follows:\n 20: \n 21: \\`\\`\\`markdown\n 22: Ethan: Text that anchor1 needs to say\n 23: \n 24: Nancy: Text that anchor2 needs to say\n 25: More text to say by anchor 2\n 26: \n 27: Ethan: Text that anchor1 needs to say\n 28: \\`\\`\\`\n 29: `\n 30: \n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-OCXHSW`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/demovideo.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Demo video\\n\\nThis file contains a text description of the g\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"screenplay\",\ntitle: \"A dialog generator for descript\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"A dialog generator for descript\\\",\\n    d\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/screenplay.gptool\"...,\ndescription: \"Given a description of scenes, generate a dialog between two\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nSUMMARY:\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./src/demovideo.dialog.md`\n`````md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n\n`````\n\n-   `SUMMARY`\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n\n`````\n\n","text":"File ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nSUMMARY:\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n`````","summary":"Created a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n"}}}
