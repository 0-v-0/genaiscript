{"sha":"0d7cceb16e5f8e9a9eff57a5819e601e9a08ef1a13cb4ea8ab1e9207461136bc","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/image.coarch.md:11:0","hash":"a1e9101b18b16b54"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/image.coarch.md","filename":"/workspaces/coarch/packages/sample/src/image.coarch.md","type":"replace","range":[[0,0],[38,0]],"text":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/image.coarch.md":{"before":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n","after":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-QORIFT`\n\n-   env.**links**\n```````````````js\n[ { label: \"node\",\n  filename: \"src/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... },\n{ label: \"genfiles.node/image.mjs\",\n  filename: \"src/genfiles.node/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/image.coarch.md\",\nlabel: \"current\",\ncontent: \"---\\ntitle: Image Resize Command Line Application\\ndescription\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./image.coarch.md`\n`````md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n\n`````\n\n","text":"File ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````","summary":""}}}
{"sha":"0d7cceb16e5f8e9a9eff57a5819e601e9a08ef1a13cb4ea8ab1e9207461136bc","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/image.coarch.md:11:0","hash":"a1e9101b18b16b54"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/image.coarch.md","filename":"/workspaces/coarch/packages/sample/src/image.coarch.md","type":"replace","range":[[0,0],[38,0]],"text":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/image.coarch.md":{"before":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n","after":"---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-IELEWU`\n\n-   env.**links**\n```````````````js\n[ { label: \"node\",\n  filename: \"src/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... },\n{ label: \"genfiles.node/image.mjs\",\n  filename: \"src/genfiles.node/image.mjs\",\n  content: \"import fs from 'fs';\\nimport path from 'path';\\nimport sharp f\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/image.coarch.md\",\nlabel: \"current\",\ncontent: \"---\\ntitle: Image Resize Command Line Application\\ndescription\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/image.coarch.md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image resize\n\nA command line app that resizes images using the best algorithm. Use node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse command line arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize image {#OR24}\nResize the image to the specified size.\n\n## Save resized image {#IA42}\nSave the resized image to the output file name.\n\n## Display success message {#DT13}\nInform the user of the completed process and output file name.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./image.coarch.md`\n`````md\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n\n`````\n\n","text":"File ./image.coarch.md:\n`````\n---\ntitle: Image Resize Command Line Application\ndescription: Develop a command line app for resizing images using Node.js LTS, optimal algorithms, and validation techniques.\nkeywords:\n  - image resize\n  - command line app\n  - Node.js\n  - image processing\n  - resizing algorithm\n---\n\n# Image Resize\n\nA command line app that resizes images using the best algorithm. Use Node.js LTS.\n\n* [node](./image.mjs)\n- [genfiles.node/image.mjs](./genfiles.node/image.mjs)\n\n## Parse Command Line Arguments {#UV61}\nExtract file name, size, and output file name.\n\n## Validate Input {#QY23}\nCheck arguments, input file, dimensions, and output file name.\n\n## Load Image {#MD29}\nLoad the image using a library.\n\n## Determine Optimal Algorithm {#KU58}\nSelect the best resizing algorithm.\n\n## Resize Image {#OR24}\nResize the image to the specified size.\n\n## Save Resized Image {#IA42}\nSave the resized image to the output file name.\n\n## Display Success Message {#DT13}\nInform the user of the completed process and output file name.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n`````","summary":"Corrected grammatical and spelling errors, and made the text more technical in the image.coarch.md file.\n"}}}
{"sha":"22d5795ecf5f5cc76d584760687ce8ecdfca432a47efc431b1be93f537b17506","key":{"template":{"id":"technical","title":"Technical proofreading"},"fragment":{"fullId":"src/tennis.coarch.md:0:0","hash":"b90b8ef0f789588a"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/src/tennis.coarch.md","filename":"/workspaces/coarch/packages/sample/src/tennis.coarch.md","type":"replace","range":[[0,0],[4,0]],"text":"# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/tennis.coarch.md":{"before":"# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n","after":"# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Technical proofreading\" (`technical`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Technical proofreading\",\n  3:     description: \"Review the text as a technical document writer.\",\n  4:     categories: [\"samples\"],\n  5:     system: [\"system.technical\", \"system.summary\"],\n  6:     temperature: 0\n  7: })\n  8: \n  9: $`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n 10: \n 11: def(\"TEXT\", env.file)\n 12: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.samples** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/tennis.coarch.md\n# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n`````\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-TISDGM`\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/sample/src/tennis.coarch.md\",\nlabel: \"current\",\ncontent: \"# Tennis score app\\n\\nThe web application allows a user to ent\"... }\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"technical\",\ntitle: \"Technical proofreading\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Technical proofreading\\\",\\n    descriptio\"...,\ndescription: \"Review the text as a technical document writer.\",\ncategories: [ \"samples\" ],\nsystem: [ \"system.technical\",\n  \"system.summary\" ],\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\".`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\".\n\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.technical`\n\n```````````````js\n  1: system({ title: \"Technical Writer\" });\n  2: \n  3: $`You are an expert technical document writer.`;\n  4: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are an expert technical document writer.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 800\n\n```````````````markdown\nYou are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.\n\nTEXT:\n````` file=/workspaces/coarch/packages/sample/src/tennis.coarch.md\n# Tennis score app\n\nThe web application allows a user to enter\nthe scores of a tennis match and displays the current score.\n`````\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./tennis.coarch.md:\n`````\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./tennis.coarch.md`\n`````md\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n\n`````\n\n-   `SUMMARY`\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n\n`````\n\n","text":"File ./tennis.coarch.md:\n`````\n# Tennis Score App\n\nThe web application enables users to input\ntennis match scores and displays the current score.\n`````\n\nSUMMARY:\n`````\nCorrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n`````","summary":"Corrected grammatical errors, fixed spelling errors, and made the text more technical in tennis.coarch.md.\n"}}}
{"sha":"08c85d8bb6ce32ee1d54b7787641fdde08ad7cd33bfbcfe30b177333938f3591","key":{"template":{"id":"screenplay","title":"A dialog generator for descript"},"fragment":{"fullId":"src/demovideo.gpspec.md:0:0","hash":"cb63b807d7faa3c6"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/sample/src/demovideo.dialog.md","filename":"/workspaces/coarch/packages/sample/src/demovideo.dialog.md","type":"createfile","text":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n","overwrite":true},{"label":"A dialog generator for descript","filename":"/workspaces/coarch/packages/sample/src/demovideo.gpspec.md","type":"insert","pos":[2,63],"text":"\n-   [demovideo.dialog.md](demovideo.dialog.md)"}],"fileEdits":{"/workspaces/coarch/packages/sample/src/demovideo.dialog.md":{"before":null,"after":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"A dialog generator for descript\" (`screenplay`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"A dialog generator for descript\",\n  3:     description:\n  4:         \"Given a description of scenes, generate a dialog between two avatar characters.\",\n  5: })\n  6: \n  7: const output = env.file.filename.replace(\".gpspec.md\", \".dialog.md\")\n  8: def(\n  9:     \"DIALOG\",\n 10:     env.links.filter((f) => f.filename.endsWith(\".dialog.md\"))\n 11: )\n 12: def(\"SCENES\", env.file)\n 13: \n 14: $`You are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\n 15: between the two anchors, similarly to sports commentators.\n 16: \n 17: The subject is a screen recording of a software tool that needs to be described.\n 18: \n 19: SCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file ${output} formatted as follows:\n 20: \n 21: \\`\\`\\`markdown\n 22: Ethan: Text that anchor1 needs to say\n 23: \n 24: Nancy: Text that anchor2 needs to say\n 25: More text to say by anchor 2\n 26: \n 27: Ethan: Text that anchor1 needs to say\n 28: \\`\\`\\`\n 29: `\n 30: \n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-OCXHSW`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/demovideo.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Demo video\\n\\nThis file contains a text description of the g\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"screenplay\",\ntitle: \"A dialog generator for descript\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"A dialog generator for descript\\\",\\n    d\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/screenplay.gptool\"...,\ndescription: \"Given a description of scenes, generate a dialog between two\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nSUMMARY:\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./src/demovideo.dialog.md`\n`````md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n\n`````\n\n-   `SUMMARY`\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n\n`````\n\n","text":"File ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nSUMMARY:\n`````\nCreated a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n`````","summary":"Created a dialog between two news commentator anchors discussing a software tool demo in ./src/demovideo.dialog.md.\n"}}}
{"sha":"ec5abb7273763571d0ec9ab1ad653bc0b7e978cce770000ceeaee163c867a976","key":{"template":{"id":"screenplay","title":"A dialog generator for descript"},"fragment":{"fullId":"src/demovideo.gpspec.md:0:0","hash":"2be1f3b18ada1ee8"}},"val":{"response":{"edits":[],"fileEdits":{"/workspaces/coarch/packages/sample/src/demovideo.dialog.md":{"before":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n","after":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"A dialog generator for descript\" (`screenplay`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"A dialog generator for descript\",\n  3:     description:\n  4:         \"Given a description of scenes, generate a dialog between two avatar characters.\",\n  5: })\n  6: \n  7: const output = env.file.filename.replace(\".gpspec.md\", \".dialog.md\")\n  8: def(\n  9:     \"DIALOG\",\n 10:     env.links.filter((f) => f.filename.endsWith(\".dialog.md\"))\n 11: )\n 12: def(\n 13:     \"INFO\",\n 14:     env.links.filter(\n 15:         (f) => f.filename.endsWith(\".md\") && !f.filename.endsWith(\".dialog.md\")\n 16:     )\n 17: )\n 18: def(\"SCENES\", env.file)\n 19: \n 20: $`You are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\n 21: between the two anchors, similarly to sports commentators.\n 22: \n 23: The subject is a screen recording of a software tool that needs to be described. The tool\n 24: is described in INFO.\n 25: \n 26: SCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file ${output} formatted as follows:\n 27: \n 28: \\`\\`\\`markdown\n 29: Ethan: Text that anchor1 needs to say\n 30: \n 31: Nancy: Text that anchor2 needs to say\n 32: More text to say by anchor 2\n 33: \n 34: Ethan: Text that anchor1 needs to say\n 35: \\`\\`\\`\n 36: `\n 37: \n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nDIALOG:\n````` file=src/demovideo.dialog.md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-YUOOHK`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/demovideo.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Demo video\\n\\nThis file contains a text description of the g\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"demovideo.dialog.md\",\n  filename: \"src/demovideo.dialog.md\",\n  content: \"Ethan: Welcome to our demo of GPTools, a powerful software t\"... },\n{ label: \"gptools\",\n  filename: \"/workspaces/coarch/packages/whitepaper/gptools-overview.md\",\n  content: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"screenplay\",\ntitle: \"A dialog generator for descript\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"A dialog generator for descript\\\",\\n    d\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/screenplay.gptool\"...,\ndescription: \"Given a description of scenes, generate a dialog between two\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nDIALOG:\n````` file=src/demovideo.dialog.md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./src/demovideo.dialog.md`\n`````md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n\n`````\n\n","text":"File ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````"}}}
{"sha":"ec5abb7273763571d0ec9ab1ad653bc0b7e978cce770000ceeaee163c867a976","key":{"template":{"id":"screenplay","title":"A dialog generator for descript"},"fragment":{"fullId":"src/demovideo.gpspec.md:0:0","hash":"2be1f3b18ada1ee8"}},"val":{"response":{"edits":[],"fileEdits":{"/workspaces/coarch/packages/sample/src/demovideo.dialog.md":{"before":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n","after":"Ethan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"A dialog generator for descript\" (`screenplay`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"A dialog generator for descript\",\n  3:     description:\n  4:         \"Given a description of scenes, generate a dialog between two avatar characters.\",\n  5: })\n  6: \n  7: const output = env.file.filename.replace(\".gpspec.md\", \".dialog.md\")\n  8: def(\n  9:     \"DIALOG\",\n 10:     env.links.filter((f) => f.filename.endsWith(\".dialog.md\"))\n 11: )\n 12: def(\n 13:     \"INFO\",\n 14:     env.links.filter(\n 15:         (f) => f.filename.endsWith(\".md\") && !f.filename.endsWith(\".dialog.md\")\n 16:     )\n 17: )\n 18: def(\"SCENES\", env.file)\n 19: \n 20: $`You are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\n 21: between the two anchors, similarly to sports commentators.\n 22: \n 23: The subject is a screen recording of a software tool that needs to be described. The tool\n 24: is described in INFO. Use information from INFO in the dialogs.\n 25: \n 26: SCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file ${output} formatted as follows:\n 27: \n 28: \\`\\`\\`markdown\n 29: Ethan: Text that anchor1 needs to say\n 30: \n 31: Nancy: Text that anchor2 needs to say\n 32: More text to say by anchor 2\n 33: \n 34: Ethan: Text that anchor1 needs to say\n 35: \\`\\`\\`\n 36: `\n 37: \n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nDIALOG:\n````` file=src/demovideo.dialog.md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO. Use information from INFO in the dialogs.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-WYSKAG`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/demovideo.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Demo video\\n\\nThis file contains a text description of the g\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"demovideo.dialog.md\",\n  filename: \"src/demovideo.dialog.md\",\n  content: \"Ethan: Welcome to our demo of GPTools, a powerful software t\"... },\n{ label: \"gptools\",\n  filename: \"/workspaces/coarch/packages/whitepaper/gptools-overview.md\",\n  content: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"screenplay\",\ntitle: \"A dialog generator for descript\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"A dialog generator for descript\\\",\\n    d\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/screenplay.gptool\"...,\ndescription: \"Given a description of scenes, generate a dialog between two\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nDIALOG:\n````` file=src/demovideo.dialog.md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO. Use information from INFO in the dialogs.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./src/demovideo.dialog.md`\n`````md\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n\n`````\n\n","text":"File ./src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demo of GPTools, a powerful software tool for code generation.\n\nNancy: That's right, Ethan. In this demo, we'll see how a user can create a function to validate email addresses using natural language.\n\nEthan: The user starts by clicking on the gpspec file and writing the task they want to accomplish.\n\nNancy: Then, they select the code generation GPTool, which processes the context and text generation instructions to create a prompt.\n\nEthan: As the results are generated, they're streamed to Visual Studio Code, where the user can review them in a refactoring workspace edit.\n\nNancy: It's an efficient and user-friendly way to generate code, making developers' lives easier.\n`````"}}}
{"sha":"ec5abb7273763571d0ec9ab1ad653bc0b7e978cce770000ceeaee163c867a976","key":{"template":{"id":"screenplay","title":"A dialog generator for descript"},"fragment":{"fullId":"src/demovideo.gpspec.md:0:0","hash":"2be1f3b18ada1ee8"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/sample/src/demovideo.dialog.md","filename":"/workspaces/coarch/packages/sample/src/demovideo.dialog.md","type":"createfile","text":"Ethan: Welcome to our demonstration of GPTools, a powerful framework that empowers teams to create and use AI-enhanced scripts for their workflows.\n\nNancy: That's right, Ethan. GPTools leverages foundation models to enable a new kind of scripting that combines traditional code and natural language.\n\nEthan: In this demo, we'll see how a user can create a function that validates email addresses using natural language. They start by clicking on the gpspec file and writing the task to be done.\n\nNancy: Once the task is written, the user selects the code generation gptool. GPTools are JavaScript files that process the context and text generation instruction to create a prompt.\n\nEthan: The generation of results is streamed to VSCode, and the results are parsed into a refactoring workspace edit, which the user can review.\n\nNancy: This seamless integration with VSCode makes it easy for users, even non-developers, to automate their workflows in ways that were previously impossible.\n\nEthan: Absolutely, Nancy. GPTools is a game-changer for teams working with complex artifacts, enabling them to create, understand, and maintain their projects more efficiently.\n","overwrite":true}],"fileEdits":{"/workspaces/coarch/packages/sample/src/demovideo.dialog.md":{"before":null,"after":"Ethan: Welcome to our demonstration of GPTools, a powerful framework that empowers teams to create and use AI-enhanced scripts for their workflows.\n\nNancy: That's right, Ethan. GPTools leverages foundation models to enable a new kind of scripting that combines traditional code and natural language.\n\nEthan: In this demo, we'll see how a user can create a function that validates email addresses using natural language. They start by clicking on the gpspec file and writing the task to be done.\n\nNancy: Once the task is written, the user selects the code generation gptool. GPTools are JavaScript files that process the context and text generation instruction to create a prompt.\n\nEthan: The generation of results is streamed to VSCode, and the results are parsed into a refactoring workspace edit, which the user can review.\n\nNancy: This seamless integration with VSCode makes it easy for users, even non-developers, to automate their workflows in ways that were previously impossible.\n\nEthan: Absolutely, Nancy. GPTools is a game-changer for teams working with complex artifacts, enabling them to create, understand, and maintain their projects more efficiently.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"A dialog generator for descript\" (`screenplay`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"A dialog generator for descript\",\n  3:     description:\n  4:         \"Given a description of scenes, generate a dialog between two avatar characters.\",\n  5: })\n  6: \n  7: const output = env.file.filename.replace(\".gpspec.md\", \".dialog.md\")\n  8: def(\n  9:     \"DIALOG\",\n 10:     env.links.filter((f) => f.filename.endsWith(\".dialog.md\"))\n 11: )\n 12: def(\n 13:     \"INFO\",\n 14:     env.links.filter(\n 15:         (f) => f.filename.endsWith(\".md\") && !f.filename.endsWith(\".dialog.md\")\n 16:     )\n 17: )\n 18: def(\"SCENES\", env.file)\n 19: \n 20: $`You are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\n 21: between the two anchors, similarly to sports commentators.\n 22: \n 23: The subject is a screen recording of a software tool that needs to be described. The tool\n 24: is described in INFO. Use information from INFO in the dialogs.\n 25: \n 26: SCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file ${output} formatted as follows:\n 27: \n 28: \\`\\`\\`markdown\n 29: Ethan: Text that anchor1 needs to say\n 30: \n 31: Nancy: Text that anchor2 needs to say\n 32: More text to say by anchor 2\n 33: \n 34: Ethan: Text that anchor1 needs to say\n 35: \\`\\`\\`\n 36: `\n 37: \n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO. Use information from INFO in the dialogs.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-XGEDVX`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/demovideo.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Demo video\\n\\nThis file contains a text description of the g\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"gptools\",\n  filename: \"/workspaces/coarch/packages/whitepaper/gptools-overview.md\",\n  content: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"front-matter\",\n  title: \"Title and Description\",\n  description: undefined },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"screenplay\",\ntitle: \"A dialog generator for descript\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"A dialog generator for descript\\\",\\n    d\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/screenplay.gptool\"...,\ndescription: \"Given a description of scenes, generate a dialog between two\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nINFO:\n````` file=/workspaces/coarch/packages/whitepaper/gptools-overview.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   Repository: [gptools](https://github.com/microsoft/coarch/tree/main)\n\n## Abstract\n\ngptools is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. gptools provides support for creating, understanding, and maintaining complex collections of documents such as software repositories, project management, etc.  Our framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language. The key elements of the gptools framework are **gpspecs** and **gptools**. gpspecs are natural language documents that describe specific user tasks to accomplish.  gptools are general scripts that combine traditional software and natural language prompts and rely on an LLM to generate results. We execute gptools in the context of a gpspec to achieve a result.  By separating these two abstractions, we allow gptools to be authored, maintained, and updated independently of the gpspecs that use them.  The gptools framework includes an execution engine to execute a gptool and an IDE extension to VS Code to support user interaction with the gptool.  We believe that gptools will empower even non-developers to automate their workflows in ways that were previously impossible.\n\n## Introduction\n\nThis document describes the gptools framework, which empowers teams, including non-developers, to use AI-enhanced scripts to support their efforts in creating, understanding, and maintaining complex artifacts.  gptools leverages foundation models (LLMs) to enable a new kind of scripting that combines traditional code and natural language. To understand how gptools works, we provide an example. The key elements of gptools include gpspecs, gptools, the gpvm, and the gptools extension to VS code. \n\n```mermaid\ngraph LR\nF[User:\\nvia VSCode\\n UI] --> G[gpspec:\\nwrite email\\n recognizer]\nG --> A[gptool:\\ngenerate\\npython code]\nA --> C[gpvm pre:\\nexpand gpspec\\nand gptool\\ninto prompt]\nC --> D[Foundation Model]\nD --> E[gpvm post:\\nextract\\npython code]\nE --> F\n```\n\nThis diagram illustrates the workflow of gptools with a concrete example. The user wants to write a python function that recognizes well-formed email addresses and writes a gpspec. She then invokes a gptool, one that will generate python code from a spec, on that gpspec, much as a user might call a python script with some arguments. The gpvm composes the gpspec with the gptool creating an LLM prompt, which in turn is passed to the foundation model. The foundation model returns a result (python code) to the gpvm, which postprocesses it, creates the requested python file, and notifies the user.\n\nThis document will motivate the design of the gptools framework, illustrate its use with examples, and describe elements of implementation.\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural Language to Invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. For example, a gpspec might contain links to markdown files, code files, etc.\n-   Natural language describing the specific task to be performed as input to a gptool. For example, the spec  used to generate code would include a description of the functionality and might include a description style guidelines to observe, etc.\n\n. A single gpspec file might be used as input to multiple gptools.  For example, a gpspec might be used to generate code, documentation, and tests, each using a different gptool.\n\n## Expanding the Example\n\nTo better understand how gptools work, we expand the example given above. The diagram below illustrates the gptools workflow in greater detail.  Our design of gptools is based on the following principles:\n- gptools are used in a context where there is human oversight on the content generated.  As a result, our workflow starts and ends with the user.  \n- We assume that the output of a gptool may be incomplete or incorrect, and that the user will need to interact with the output to refine it.  As a result, we allow the user to accept/reject and directly modify the AI-generated content.\n- We assume that the user will want to understand how the AI model was used to generate the results. We provide a trace of how the gpvm composes the gpspec and gptool into a prompt that can be processed by the foundation model.\n- We support iterative development, where the user can both edit the gpspec and the gptool if they see opportunities to improve the results.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec context\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update context with output\nVSCode->>User: Display updated context\n```\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec instantiates the gptool, which interacts with the gpvm and foundation model. The AI-generated output is used to update the context, and the user interacts with the updated context through the gptools extension to VS code.\n\n\n### gptool Example: Python Developer gptool\n\nThis is an example of a simple gptool that generates python code from a gpspec file:\n\n```javascript \ngptool({\n    title: \"Generate python code\",\n    model: \"gpt-4\",\n    description: \"Given a task, generate python code.\",\n})\n\ndef(\"CODE\", env.links.filter(\n    (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n))\ndef(\"TASK\", env.file)\n\n$`Generate python code for the task in TASK. Save code in CODE. If the CODE is already present, ensure that CODE matches the description in TASK and make changes to CODE if it does not.`\n```\n\nIn this example we see the following elements:\n- A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n- JavaScript code that manipulates the environment context, specifically by extracting only the python files from the context that do not start with \"test_\".\n- Variable definitions that allow the prompt to refer to elements in the context. TASK refers to the gpspec file, and CODE refers to the python files in the context.\n- Natural language that combines these elements.\n\n\n### gpspec Example: Using the Python Developer gptool\n\nThis is an example of a gpspec file that uses the python generating gptool shown above:\n\n```markdown\n# email address and URL recognizer\n\nWrite a function that takes a string argument and returns true if the whole string is a valid email address, false otherwise.\n```\n\nIn this example, there is no additional context needed to invoke the python developer gptool. In other cases, the gpspec file will contain links to additional context elements, such as markdown, code files, etc.\n\n## gpvm - A Framework for Executing gpspecs and gptools\n\nEvery system that interacts with a foundation model includes layers that transform user input into a prompt that can be processed by the foundation model, and layers that transform the output of the foundation model into a form that is useful to the user. \n\n- gpvm is a runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Executes whatever code is present in the gptool (in the example above, the variables CODE and TASK are defined by executing JavaScript code)\n    -   Expands the gpspec and natural language of the gptool into a prompt that can be processed by the foundation model \n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include creating files, updating files, generating user feedback, etc.)\n\nUnlike many AI model orchestration frameworks, such as Semantic Kernel, gpvm does not leverage the model to do chain-of-thought reasoning or utomatically stage multiple invocations of the AI model during its execution. gptools currently relies on the user to choose and invoke the appropriate gptool as needed.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   An invocation of the gpvm to process the user input and generate results\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical just as packages are authored and maintained today\n-   Professional developers can author and maintain individual gptools \n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n## Related Work\n\ngptools are related to a number of foundation model projects that automate workflows and encapsulate LLM actions in software artifacts.  We describe some of these projects below:\n\n### AI Tools for Developers\n- [GitHub Copilot](https://copilot.github.com/) is a VS Code extension that uses the Codex LLM to suggest code completions based on the context of the current file.  Copilot provides LLM support for writing code but does not currently have an extensibility model or a way to create,  maintain and apply collections of AI-enhanced scripts. \n- [codeplan](https://arxiv.org/abs/2309.12499) is a task-agnostic framework that frames repository-level coding as a planning problem, synthesizing a multi-step chain of edits where each step results in a call to an LLM on a code location with context derived from the entire repository, previous code changes, and task-specific instructions.  While codeplan uses LLM prompts to generate code, it does not provide a way to create, maintain and apply collections of AI-enhanced scripts.\n\n### LLM Automation/Orchestration Frameworks\n- [autogpt](https://github.com/Significant-Gravitas/AutoGPT) is an AI agent that utilizes a large language model to drive its actions and decisions. Unlike traditional language model applications, AutoGPT does not require repeated prompting by a human and can autonomously develop and manage tasks.  \n- [langchain](https://www.langchain.com/) is a Python library designed to simplify the development of Natural Language Processing (NLP) applications using large language models. It provides a framework for connecting language models to other sources of data and allowing them to interact with their environment.\n- [semantic kernel](https://github.com/microsoft/semantic-kernel) is an open-source SDK that allows developers to easily integrate AI services  with conventional programming languages such as C# and Python. It provides a framework for connecting language models to other sources of data, allowing them to interact with their environment and perform tasks autonomously.\n- [autogen](https://arxiv.org/abs/2308.08155) is a framework for simplifying the orchestration, optimization, and automation of large language model (LLM) workflows. It offers customizable and conversable agents that leverage LLMs while addressing their limitations by integrating with humans and tools and having conversations between multiple agents via automated chat.\n\ngptools differ from existing AI task automation frameworks in the following ways:\n- gptools are designed to be authored, maintained, and applied by non-developers as well as developers.\n- gptools define a separation between the gptool and the gpspec that instantiates it, allowing for modularity, reuse, and easier understanding by non-developers.\n- gptools do not assume task automation and provide a user experience that integrates seamlessly with VS code.\n- The gptools UI exposes both the content and execution of each gptools to facilitate human oversight and understanding of how the AI model was used to generate the results.  \n`````\n\nSCENES:\n````` file=src/demovideo.gpspec.md\n# Demo video\n\nThis file contains a text description of the gptools demo file.\n\n-   [demovideo.dialog.md](demovideo.dialog.md)\n-   [gptools](../../whitepaper/gptools-overview.md)\n\n## Scenes\n\nThis video is a demonstration of GPTools.\n\nThe user clicks on the gpspec file and write the task to be done. In this case, the user wants to create a function that validates email using natural language.\n\nThe GPTools are javascript files that process the context and text generation instruction to create a prompt. You can see the code generation tool.\n\nBack to the gpspec file, the user selects the code generation gptool. The generation of results is streamed to vscode and the results are parsed into a refactoring workspace edit\nwhich the user can review.\n`````\n\nYou are a screenplay expert at writing dialogs. You are writing a dialog between two actors that play news commentators anchors. Make it a conversation\nbetween the two anchors, similarly to sports commentators.\n\nThe subject is a screen recording of a software tool that needs to be described. The tool\nis described in INFO. Use information from INFO in the dialogs.\n\nSCENES contains the description of each scene. Save the dialog in a markdown format in DIALOG file src/demovideo.dialog.md formatted as follows:\n\n```markdown\nEthan: Text that anchor1 needs to say\n\nNancy: Text that anchor2 needs to say\nMore text to say by anchor 2\n\nEthan: Text that anchor1 needs to say\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demonstration of GPTools, a powerful framework that empowers teams to create and use AI-enhanced scripts for their workflows.\n\nNancy: That's right, Ethan. GPTools leverages foundation models to enable a new kind of scripting that combines traditional code and natural language.\n\nEthan: In this demo, we'll see how a user can create a function that validates email addresses using natural language. They start by clicking on the gpspec file and writing the task to be done.\n\nNancy: Once the task is written, the user selects the code generation gptool. GPTools are JavaScript files that process the context and text generation instruction to create a prompt.\n\nEthan: The generation of results is streamed to VSCode, and the results are parsed into a refactoring workspace edit, which the user can review.\n\nNancy: This seamless integration with VSCode makes it easy for users, even non-developers, to automate their workflows in ways that were previously impossible.\n\nEthan: Absolutely, Nancy. GPTools is a game-changer for teams working with complex artifacts, enabling them to create, understand, and maintain their projects more efficiently.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File src/demovideo.dialog.md`\n`````md\nEthan: Welcome to our demonstration of GPTools, a powerful framework that empowers teams to create and use AI-enhanced scripts for their workflows.\n\nNancy: That's right, Ethan. GPTools leverages foundation models to enable a new kind of scripting that combines traditional code and natural language.\n\nEthan: In this demo, we'll see how a user can create a function that validates email addresses using natural language. They start by clicking on the gpspec file and writing the task to be done.\n\nNancy: Once the task is written, the user selects the code generation gptool. GPTools are JavaScript files that process the context and text generation instruction to create a prompt.\n\nEthan: The generation of results is streamed to VSCode, and the results are parsed into a refactoring workspace edit, which the user can review.\n\nNancy: This seamless integration with VSCode makes it easy for users, even non-developers, to automate their workflows in ways that were previously impossible.\n\nEthan: Absolutely, Nancy. GPTools is a game-changer for teams working with complex artifacts, enabling them to create, understand, and maintain their projects more efficiently.\n\n`````\n\n","text":"File src/demovideo.dialog.md:\n`````\nEthan: Welcome to our demonstration of GPTools, a powerful framework that empowers teams to create and use AI-enhanced scripts for their workflows.\n\nNancy: That's right, Ethan. GPTools leverages foundation models to enable a new kind of scripting that combines traditional code and natural language.\n\nEthan: In this demo, we'll see how a user can create a function that validates email addresses using natural language. They start by clicking on the gpspec file and writing the task to be done.\n\nNancy: Once the task is written, the user selects the code generation gptool. GPTools are JavaScript files that process the context and text generation instruction to create a prompt.\n\nEthan: The generation of results is streamed to VSCode, and the results are parsed into a refactoring workspace edit, which the user can review.\n\nNancy: This seamless integration with VSCode makes it easy for users, even non-developers, to automate their workflows in ways that were previously impossible.\n\nEthan: Absolutely, Nancy. GPTools is a game-changer for teams working with complex artifacts, enabling them to create, understand, and maintain their projects more efficiently.\n`````"}}}
