{"sha":"3b6e59e65ce5c01abd7c2fea23457a01ae69e9eb16810b6b1aede908a03bde9a","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nYou will add comments to the document FILE as markdown comments.\n\n"}]},"val":"FILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n<!-- Comment: Consider adding an introductory paragraph to provide context and an overview of the document. -->\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\n<!-- Comment: Consider adding a brief explanation of the key elements of gptools before listing them. -->\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use"}
{"sha":"68ae77da1a29a15a9976f400ab57fea4c564af58ef5538a9f5799f16bdc31a86","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nYou will update document FILE with with markdown comments.\n\n"}]},"val":"File ./gptools-overview.gpspec.md:\n`````\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n<!-- Comment: Consider adding a brief explanation of why complex workflows are necessary for managing complex artifacts. -->\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n<!-- Comment: Consider adding examples of tasks that AI models can perform that traditional software cannot. -->\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\n<!-- Comment: Consider rephrasing \"but at the same time empower non-developers\" to \"while also empowering non-developers\" for better flow. -->\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use"}
{"sha":"823df28f0cf85f10cb62d7bc35bdae565b43daa8063b6da004740cfccca65d57","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in file gptools-overview.gpspec.md.comments.md in markdown.\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n# Comments on gptools-overview.gpspec.md\n\n## General Comments\n\n- Overall, the document is well-written and provides a clear overview of the gptools framework.\n- There are a few minor grammar and spelling issues that need to be addressed.\n\n## Specific Comments\n\n1. In the first bullet point under \"Foundation Models Create New Opportunities,\" change \"aka\" to \"also known as\" for clarity.\n2. In the second bullet point under \"AI has important advantages over traditional software,\" change \"tasks normal software cannot\" to \"tasks that normal software cannot.\"\n3. In the second bullet point under \"AI models also have disadvantages,\" change \"and it is difficult to understand why they make the decisions they do\" to \"making it difficult to understand the reasoning behind their decisions.\"\n4. In the \"gptools - a Framework for AI-Enhanced Workflows\" section, change \"but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\" to \"while empowering non-developers to author, maintain, and update AI-enhanced scripts.\"\n5. In the \"gptool: A New Kind of Script\" section, change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components:\"\n6. In the \"Benefits of gptools\" section, change \"By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\" to \"By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts that form the basis of shared libraries.\"\n7. In the \"gpspec: Natural language to invoke a gptool\" section, change \"Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\" to \"Similar to how a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines the context in which to invoke a gptool.\"\n8. In the \"gptools Extension to VS Code\" section, change \"An gptool trace viewing mechanism\" to \"A gptool trace viewing mechanism.\"\n\n## Suggestions for Improvement\n\n- Consider adding a brief introduction to the document to provide context and set the stage for the content that follows.\n- It might be helpful to include examples or use cases to illustrate how gptools and gpspecs can be used in real-world scenarios.\n`````"}
{"sha":"5e5c77d99e44e283365f1f59ca0f4c0c7912167f0d7ea416ae0590d2b3871f2e","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in COMMENTS at gptools-overview.gpspec.md.comments.md in markdown.\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n# Comments on gptools-overview.gpspec.md\n\n1. In the first bullet point under \"Foundation Models Create New Opportunities,\" consider changing \"aka\" to \"also known as\" for clarity.\n2. In the second bullet point under \"Foundation Models Create New Opportunities,\" consider rephrasing \"AI models can be instructed using natural language, allowing non-programmers to use them\" to \"AI models can be instructed using natural language, making them accessible to non-programmers.\"\n3. In the first bullet point under \"gptool: A New Kind of Script,\" consider rephrasing \"A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\" to \"A header containing metadata related to the script's execution, such as information about the LLM model to use.\"\n4. In the second bullet point under \"gptool: A New Kind of Script,\" consider rephrasing \"A natural language prompt intended to be processed by a foundation model\" to \"A natural language prompt designed for processing by a foundation model.\"\n5. In the \"gpspec: Natural language to invoke a gptool\" section, consider rephrasing \"Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\" to \"A gpspec is a natural language markdown document that defines a context for invoking a gptool, similar to how a chat enables user interaction with an AI model.\"\n6. In the \"gptools Extension to VS Code\" section, consider rephrasing \"An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\" to \"A gptool trace viewing mechanism that helps users understand how the AI model generated the results.\"\n7. In the \"Implications of gptools\" section, consider rephrasing \"Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Gptools will fuel a new generation of AI-enhanced applications, just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem.\"\n8. In the \"Implications of gptools\" section, consider rephrasing \"Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\" to \"Moreover, gptools can enable non-developers to automate their workflows in ways previously unattainable.\"\n\n`````\n\nSUMMARY:\n`````\nThe comments address issues related to clarity, grammar, and phrasing in the gptools-overview.gpspec.md file.\n`````"}
{"sha":"43fb7bea44bd617a5e73b8545a3277aa12e2f0585c7451b45820e78bd7cbbf26","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in COMMENTS at gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\nComment: comment description\nWhere:\n```markdown\nThe current markdown source in FILE.\n```\nUpdated:\n```markdown\nThe updated markdown source.\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\nComment: Fix typo in \"reuseable\"\nWhere:\n```markdown\n- A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n```\nUpdated:\n```markdown\n- A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n```\n\nComment: Add a comma for clarity\nWhere:\n```markdown\n- By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n```\nUpdated:\n```markdown\n- By separating the gptool from the gpspec, we allow non-developers to use gptools, without having to understand the details of how they work.\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```markdown\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\nUpdated:\n```markdown\n- At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```markdown\n- A gpspec is a standard markdown file with the following additional elements:\n```\nUpdated:\n```markdown\n- A gpspec is a standard markdown file, with the following additional elements:\n```\n\nComment: Change \"An\" to \"A\"\nWhere:\n```markdown\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\nUpdated:\n```markdown\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n`````"}
{"sha":"bfb6ee7ed45973990edf85d340f22fdd294bec0c265c08a49bc738fcdf912dc8","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in COMMENTS at gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\nComment: comment description\nWhere:\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n`````\nFixed a typo, added commas for clarity, and corrected a misspelled word in the gptools-overview.gpspec.md file.\n`````"}
{"sha":"ffdd7367bef7f5d15e74ce8b7b7af78dc024a4aab6d1d351a2ec6c1aad582cc7","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\nComment: comment description\nWhere:\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\nComment: Fix typo in the word \"reuseable\"\nWhere:\n```diff\n- Key elements of gptools:\n+ Key elements of gptools:\n  - *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n  - *gpspecs* – Natural language documents that instantiate gptools in a particular context\n  - *gpvm* – A framework and runtime system that executes gpspecs and gptools\n  - *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n-   - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n+   - A gptool can be used in many different contexts and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Fix typo in the word \"langauge\"\nWhere:\n```diff\n-   - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+   - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n+ Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n  - Professional developers and architects will define collections of gptools for a given vertical\n  - Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n  - Developers and non-developers can customize gptools for their particular organization or application needs\n  - Non-developers can author and maintain gpspecs for their particular projects\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nSUMMARY:\n`````\nFixed a typo in the word \"reuseable\"\nFixed a typo in the word \"langauge\"\nAdded commas for clarity in several sentences\n`````"}
{"sha":"55d56e11f8640d0458eaacfbd47a1f26104a14ad1fbf4f45a1a4026039ae811b","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n"}
{"sha":"1d77bd1d7a2ab6992a2d92e7453842cfde920acec1d664f38ca6b16daa997fee","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n- Fix typo \"langauge\" to \"language\"\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\n- Add a comma for clarity\n```diff\n- Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n+ Just as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n```\n\n- Change \"An\" to \"A\" for consistency\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nSUMMARY:\n`````\nFixed a typo, added commas for clarity, and changed \"An\" to \"A\" for consistency.\n`````"}
{"sha":"6ec44bcbeebe74319802a76956d25a18f6846788c9b2b0d83abab4c0eb37c78a","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comment 1: Typo in the word \"reusable\"\n```diff\n- Key elements of gptools:\n+ Key elements of gptools:\n  - *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n  - *gpspecs* – Natural language documents that instantiate gptools in a particular context\n  - *gpvm* – A framework and runtime system that executes gpspecs and gptools\n  - *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of reusable libraries.\n```\n\n### Comment 2: Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n### Comment 3: Capitalize \"Python\"\n```diff\n- Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n### Comment 4: Clarify the use of gpspecs\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n### Comment 5: Add a comma for clarity\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at various levels of expertise:\n```\n`````"}
{"sha":"b70182bf46b652f0f7e3fb01698ec1f4162bbcb6b1b24b4c827d4b297c205850","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate the document FILE. Minimize changes.\n\n"}]},"val":"File ./gptools-overview.gpspec.md:\n`````\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n- [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process requiring coordination of various activities.\n- Historically, software development has been highly manual, with developers using tools to create and maintain software system artifacts.\n- Over time, abstractions have been developed to manage software development complexity.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes automated processes and manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) has created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software:\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages:\n    - AI models are not perfect and can make mistakes\n    - AI models are not transparent, making it difficult to understand their decisions\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: Empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: Support tool abstraction, modularity, reuse, while empowering non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve greater functionality and ease of use. We separate scripts into two related parts: a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components:\n    - A header containing metadata related to script execution (e.g., information about the LLM model to use)\n    - A natural language prompt intended for processing by a foundation model\n    - An environment context augmenting the natural language with additional data/information\n    - Programming language constructs used to programmatically manipulate inputs and outputs\n\n- Benefits of gptools:\n    - Separating the gptool from the gpspec allows gptools to become highly engineered shared artifacts forming the basis of shared libraries.\n    - A gptool can be used in various contexts and can be updated and maintained independently of the gpspecs that use it.\n    - Separating the gptool from the gpspec allows non-developers to use gptools without understanding their details.\n    - Because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does and modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements defining the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code and information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette allowing a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system supporting connection with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes code present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface allowing the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism allowing users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for various verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their organization or application needs\n- Non-developers can author and maintain gpspecs for their projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nSUMMARY:\n`````\nChanges made to the document include minor grammatical adjustments, rephrasing for clarity, and ensuring consistency in terminology. The overall structure and content remain the same.\n`````"}
{"sha":"8c0900336706c1734456430d10059ae107714e9e57a85ed578da0262c6c495db","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n- Missing comma\n```diff\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n+ Authors: Peli de Halleux, Michał Moskal, and Ben Zorn\n```\n\n- Typo in \"LLMs\"\n```diff\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (aka LMs) have created new opportunities for automating complex workflows.\n```\n\n- Clarify \"AI models\"\n```diff\n- AI has important advantages over traditional software\n+ AI models have important advantages over traditional software\n```\n\n- Typo in \"reuseable\"\n```diff\n- A generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ A generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\n- Clarify \"the spec for code\"\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the gpspec might contain directions on the desired code as well as information about tests to be performed.\n```\n\n- Add \"the\" before \"AI software ecosystem\"\n```diff\n- python enabled the creation of the current AI software ecosystem\n+ python enabled the creation of the current AI software ecosystem\n`````\n\nSUMMARY:\n`````\n- Added a missing comma in the authors list\n- Fixed a typo in \"LLMs\" to \"LMs\"\n- Clarified \"AI models\" instead of just \"AI\"\n- Fixed a typo in \"reuseable\" to \"reusable\"\n- Clarified \"the spec for code\" to \"the gpspec\"\n- Added \"the\" before \"AI software ecosystem\"\n`````"}
{"sha":"d019e43634513137456638ed5903a93bbdf2b365d9219fbfb343ba333360e608","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about gpspecs and gptools\n```diff\n- By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n+ By separating the gptool from the gpspec, we enable non-developers to utilize gptools without needing to comprehend the underlying implementation details.\n```\n\n3. Replace \"aka\" with \"also known as\" for clarity\n```diff\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n```\n\n4. Add a comma for better readability\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n5. Change \"in\" to \"on\" for better clarity\n```diff\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used in generating the results\n```\n\n6. Replace \"the existence of\" with \"the availability of\" for better clarity\n```diff\n- The existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n+ The availability of powerful programming tools based on AI that are usable by non-developers is transformative.\n```\n`````"}
{"sha":"000ca197a8052894a0eb3e4aaf4aebac33dd9d3ce01c50864f30aa08d72cfeca","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n`````"}
{"sha":"1bb083335c3a34d1145eaef74a85ac0653164d931180cc8233f57b40e967f123","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n- Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n- Missing comma\n```diff\n-   Vision: empower teams including non-developers\n+   Vision: empower teams, including non-developers\n```\n\n- Typo in \"gptools extension to VS code\"\n```diff\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n+   _gptools extension to VS Code_ – supporting seamless user interaction with gptools\n```\n\n- Add a comma for clarity\n```diff\n-   A gpspec is a standard markdown file with the following additional elements:\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Change \"the spec for code\" to \"the gpspec for code\"\n```diff\n-   For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+   For example, the gpspec for code might contain directions on the desired code as well as information about tests to be performed.\n```\n\n- Add a comma for clarity\n```diff\n-   Different gptools invoked from the gpspec file can be used to perform different tasks.\n+   Different gptools, invoked from the gpspec file, can be used to perform different tasks.\n```\n\n- Change \"the AI model of interest\" to \"the desired AI model\"\n```diff\n-   A token management system that supports connecting with the AI model of interest\n+   A token management system that supports connecting with the desired AI model\n```\n\n- Add a comma for clarity\n```diff\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n+   Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n`````"}
{"sha":"c8d3570f28af6afeec4de8fadcbc3a6b0de1ca7333a4c5b987dd1e8333a3ff9c","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n`````"}
{"sha":"287707fead93f371159f3f0210fb4b0bb4720d902910b0adf5d6eb28d860d699","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comment 1: Fix typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   use LLM to describe foundation models\n```\n\n### Comment 2: Change \"aka\" to \"also known as\" for clarity\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n```\n\n### Comment 3: Add a comma for better readability\n```diff\n-   Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+   Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n### Comment 4: Change \"a gpspec is\" to \"a gpspec consists of\" for clarity\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements:\n+   A gpspec consists of a standard markdown file, with the following additional elements:\n```\n\n### Comment 5: Change \"the spec for code\" to \"the gpspec for code\" for consistency\n```diff\n-   For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+   For example, the gpspec for code might contain directions on the desired code as well as information about tests to be performed.\n```\n\n### Comment 6: Add a comma for better readability\n```diff\n-   A user interface that allows the user to interact with the AI model to refine the results\n+   A user interface that allows the user to interact with the AI model, to refine the results\n```\n\n### Comment 7: Change \"the existence of gptools\" to \"the availability of gptools\" for clarity\n```diff\n-   The existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n+   The availability of powerful programming tools based on AI that are usable by non-developers is transformative.\n`````\n\nSUMMARY:\n`````\nFixed a typo, improved clarity and readability in several sections, and ensured consistency in terminology.\n`````"}
{"sha":"fb1a954cb4c2cab62c08560250e1333db8b9472e6133e70ad24c95c11ab255d7","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"gptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models are not perfect\" to \"AI models are not always accurate\"\n```diff\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always accurate, and can make mistakes\n```\n\n- Change \"AI models are not transparent\" to \"AI models often lack transparency\"\n```diff\n-   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+   AI models often lack transparency, and it is difficult to understand why they make the decisions they do\n```\n\n- Add \"the\" before \"gptools extension to VS code\"\n```diff\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n+   _the gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements\" to \"A gpspec is a standard markdown file that includes the following additional elements\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file that includes the following additional elements\n```\n\n- Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight is essential for the effective use of AI models.\"\n```diff\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight is essential for the effective use of AI models.\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}
{"sha":"fb1a954cb4c2cab62c08560250e1333db8b9472e6133e70ad24c95c11ab255d7","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"gptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Add a comma after \"AI models can perform tasks normal software cannot\"\n```diff\n-   AI models can perform tasks normal software cannot\n+   AI models can perform tasks normal software cannot,\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n-   AI models are best used to augment human workflows, not replace them\n+   AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Add a comma after \"Goals: support tool abstraction\"\n```diff\n-   Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+   Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Add a comma after \"A gpspec is a standard markdown file\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements:\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}
{"sha":"04f4d6dfe4dd0fdac5219012286ce792e53d4f628edfa8a1887b2b835aa5b53c","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"- Replace \"aka\" with \"also known as\"\n```diff\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models can perform tasks normal software cannot\" to \"AI models can perform tasks that normal software cannot\"\n```diff\n- AI models can perform tasks normal software cannot\n+ AI models can perform tasks that normal software cannot\n```\n\n- Change \"AI models are not perfect, and can make mistakes\" to \"AI models are not perfect and can make mistakes\"\n```diff\n- AI models are not perfect, and can make mistakes\n+ AI models are not perfect and can make mistakes\n```\n\n- Change \"AI models are not transparent, and it is difficult to understand why they make the decisions they do\" to \"AI models are not transparent, making it difficult to understand why they make the decisions they do\"\n```diff\n- AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+ AI models are not transparent, making it difficult to understand why they make the decisions they do\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n- AI models are best used to augment human workflows, not replace them\n+ AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n- A gptool is a script with the following components\n+ A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements:\" to \"A gpspec is a standard markdown file that includes the following additional elements:\"\n```diff\n- A gpspec is a standard markdown file, with the following additional elements:\n+ A gpspec is a standard markdown file that includes the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n- Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}
{"sha":"c10c76951a7d6b299067e8f0e5b2664d03ff57d8d78c45e18b283f1ee901da23","key":{"model":"gpt-4","temperature":0.2,"max_tokens":4000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- summary and reason of the change (don't emit \"summary:\")\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n\n"}]},"val":"Comment 1: Fix typo in the word \"describe\"\nReason: There is a typo in the word \"describe\" which should be corrected for better readability.\n\n```diff\n-   use LLM to describe foundation models\n+   use LLM to describe foundation models\n```\n\nComment 2: Add a comma after \"aka LLMs\"\nReason: Adding a comma after \"aka LLMs\" improves the sentence structure and readability.\n\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (aka LLMs,) have created new opportunities for automating complex workflows.\n```\n\nComment 3: Change \"AI models are not perfect\" to \"AI models are not always perfect\"\nReason: The current statement might be perceived as too negative. Adding \"always\" softens the tone and acknowledges that AI models can sometimes be accurate.\n\n```diff\n  AI models also have disadvantages:\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always perfect, and can make mistakes\n    AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\nComment 4: Change \"gptools - a Framework for AI-Enhanced Workflows\" to \"gptools: A Framework for AI-Enhanced Workflows\"\nReason: Consistency in section title formatting.\n\n```diff\n-   gptools - a Framework for AI-Enhanced Workflows\n+   gptools: A Framework for AI-Enhanced Workflows\n```\n\nComment 5: Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components:\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptool: A New Kind of Script\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components:\n```\n\nComment 6: Add a comma after \"For example\"\nReason: Adding a comma after \"For example\" improves the sentence structure and readability.\n\n```diff\n  Different gptools invoked from the gpspec file can be used to perform different tasks.\n-   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n+   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec, with further refinement.\n```\n\nComment 7: Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight of AI models is essential for their effective use.\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptools Extension to VS Code\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight of AI models is essential for their effective use.\n```"}
