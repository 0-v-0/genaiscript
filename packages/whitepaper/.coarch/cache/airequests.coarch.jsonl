{"sha":"d2bb5fae1654c81af17522bbea5cdba219c456ae2f015e89f4229e41162a61fb","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"77a17b5fac3e8541"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\"\n  4: })\n  5: \n  6: def(\"FILE\", env.file)\n  7: \n  8: $`You are an expert Technical documentation reviewer and you will\n  9: create a list of comments about the document FILE. Address any issues\n 10: around spelling, grammar, clarity, and completeness.`\n 11: \n 12: $`You will add comments to the document FILE as markdown comments.`\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nYou will add comments to the document FILE as markdown comments.\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-SVKFWQ`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nYou will add comments to the document FILE as markdown comments.\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n<!-- Comment: Consider adding an introductory paragraph to provide context and an overview of the document. -->\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\n<!-- Comment: Consider adding a brief explanation of the key elements of gptools before listing them. -->\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use\n```````````````\n\n\n### Extracted Variables\n\n\n","text":"FILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n<!-- Comment: Consider adding an introductory paragraph to provide context and an overview of the document. -->\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\n<!-- Comment: Consider adding a brief explanation of the key elements of gptools before listing them. -->\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n<!-- Comment: Consider adding a transition sentence to connect this section with the next one. -->\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use"}}}
{"sha":"d2bb5fae1654c81af17522bbea5cdba219c456ae2f015e89f4229e41162a61fb","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"77a17b5fac3e8541"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","filename":"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","type":"createfile","text":"# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n","overwrite":true},{"label":"Add Comments","filename":"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md","type":"insert","pos":[2,20],"text":"\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)"}],"fileEdits":{"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md":{"before":null,"after":"# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000\n  5: })\n  6: \n  7: const output = env.file.filename + \".comments.md\"\n  8: def(\"FILE\", env.file)\n  9: def(\"COMMENTS\", env.links.filter(f => f.filename.endsWith(\"comments.md\")))\n 10: \n 11: $`You are an expert Technical documentation reviewer and you will\n 12: create a list of comments about the document FILE. Address any issues\n 13: around spelling, grammar, clarity, and completeness.`\n 14: \n 15: $`Write your comments in COMMENTS at ${output} in markdown in \n 16: a pseudo diff format as follows:`\n 17: \n 18: $`Comment: comment description\n 19: Where:\n 20: \\`\\`\\`diff\n 21: lines before the section\n 22: - lines to change\n 23: + lines to add\n 24: lines after the section\n 25: \\`\\`\\`\n 26: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in COMMENTS at gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\nComment: comment description\nWhere:\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-PGDPPX`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness.\n\nWrite your comments in COMMENTS at gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\nComment: comment description\nWhere:\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./gptools-overview.gpspec.md.comments.md:\n`````\n# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n`````\nFixed a typo, added commas for clarity, and corrected a misspelled word in the gptools-overview.gpspec.md file.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./gptools-overview.gpspec.md.comments.md`\n`````md\n# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n\n`````\n\n","text":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n`````\nFixed a typo, added commas for clarity, and corrected a misspelled word in the gptools-overview.gpspec.md file.\n`````"}}}
{"sha":"c809866ab6885b0a67f3e0e0575b4dc3b0402681c5ca1570ffbebeb32e02545a","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"9819c82b7586479b"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","filename":"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","type":"replace","range":[[0,0],[58,0]],"text":"- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n"}],"fileEdits":{"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md":{"before":"# Comments on gptools-overview.gpspec.md\n\nComment: Fix typo in \"reuseable\"\nWhere:\n```diff\n- a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n+ a generic reusable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\nComment: Change \"langauge\" to \"language\"\nWhere:\n```diff\n- At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n+ At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring, at many levels of expertise:\n```\n\nComment: Add a comma for clarity\nWhere:\n```diff\n- Developers and non-developers can customize gptools for their particular organization or application needs\n+ Developers and non-developers can customize gptools for their particular organization, or application needs\n```\n\nSUMMARY:\n","after":"- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000\n  5: })\n  6: \n  7: const output = env.file.filename + \".comments.md\"\n  8: def(\"FILE\", env.file)\n  9: \n 10: $`You are an expert Technical documentation reviewer and you will\n 11: create a list of comments about the document FILE. Address any issues\n 12: around spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.`\n 13: \n 14: $`Update your comments in ${output} in markdown in \n 15: a pseudo diff format as follows:`\n 16: \n 17: $`- comment description\n 18: \\`\\`\\`diff\n 19: lines before the section\n 20: - lines to change\n 21: + lines to add\n 22: lines after the section\n 23: \\`\\`\\`\n 24: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-BVRSQQ`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"gptools-overview.gpspec.md.comments.md\",\n  filename: \"gptools-overview.gpspec.md.comments.md\",\n  content: \"# Comments on gptools-overview.gpspec.md\\n\\nComment: Fix typo \"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   [gptools-overview.gpspec.md.comments.md](gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural langauge prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers. Be thorough.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\nlines before the section\n- lines to change\n+ lines to add\nlines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./gptools-overview.gpspec.md.comments.md:\n`````\n- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./gptools-overview.gpspec.md.comments.md`\n`````md\n- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n\n`````\n\n","text":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n- Correct spelling of \"language\"\n```diff\n- A natural langauge prompt intended to be processed by a foundation model\n+ A natural language prompt intended to be processed by a foundation model\n```\n\n- Add a comma for clarity\n```diff\n- Goals: support tool abstraction, modularity, reuse but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+ Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Replace \"engineering\" with \"engineered\"\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineering shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n```\n\n- Add a comma for clarity\n```diff\n- A gpspec is a standard markdown file with the following additional elements\n+ A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Add a colon for clarity\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement\n+ Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement:\n```\n\n- Add a colon for clarity\n```diff\n- The extension provides the following capabilities\n+ The extension provides the following capabilities:\n```\n\n- Replace \"An\" with \"A\"\n```diff\n- An gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n+ A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n```\n\n- Add a comma for clarity\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n- Add a colon for clarity\n```diff\n- We envision the creation of gptools for many different verticals with opportunities for customization and authoring at many levels of expertise\n+ We envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n```\n\n- Add a comma for clarity\n```diff\n- Furthermore the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n+ Furthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n"}}}
{"sha":"2ec81a3dbf89ab3467ee21b878a0ac89450f9807ff08314689c7a41c93fe0530","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"44cf7f52890e9944"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","filename":"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","type":"createfile","text":"### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n","overwrite":true}],"fileEdits":{"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md":{"before":null,"after":"### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000\n  5: })\n  6: \n  7: const output = env.file.filename + \".comments.md\"\n  8: def(\"FILE\", env.file)\n  9: \n 10: $`You are an expert Technical documentation reviewer and you will\n 11: create a list of comments about the document FILE. Address any issues\n 12: around spelling, grammar, clarity, and completeness. Explain your answers.`\n 13: \n 14: $`Update your comments in ${output} in markdown in \n 15: a pseudo diff format as follows:`\n 16: \n 17: $`- comment description\n 18: \\`\\`\\`diff\n 19: 2 or more lines before the section\n 20: - lines to change\n 21: + lines to add\n 22: 2 or more lines after the section\n 23: \\`\\`\\`\n 24: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-VGOKMN`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n- Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n- Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n- Software development is a complex process that requires the coordination of many different activities.\n- Historically, software development has been a highly   manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n- Over time abstractions have been developed to help manage the complexity of software development.\n    - Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n- Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n- AI has important advantages over traditional software\n    - AI models can perform tasks normal software cannot\n    - AI models can be instructed using natural language, allowing non-programmers to use them\n- AI models also have disadvantages\n    - AI models are not perfect, and can make mistakes\n    - AI models are not transparent, and it is difficult to understand why they make the decisions they do\n- AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use.  We separate scripts into two related parts: a generic reuseable *gptool* and a natural language *gpspec* that instantiates the gptool in a particular context\n\nKey elements of gptools:\n- *gptools* – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n- *gpspecs* – Natural language documents that instantiate gptools in a particular context\n- *gpvm* – A framework and runtime system that executes gpspecs and gptools\n- *gptools extension to VS code* – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n- A gptool is a script with the following components\n    - A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    - A natural language prompt intended to be processed by a foundation model\n    - An environment context that augments the natural language with additional data/information\n    - Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n- Benefits of gptools\n    - By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.  \n    - A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    - By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    - At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n- Links to context elements that define the context in which a particular gptool is to be invoked.  The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n- Natural language describing the specific task to be performed as input to one or more gptools.  For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.  Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use.  To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n- A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n- A token management system that supports connecting with the AI model of interest\n- A runtime environment that:\n    - Captures the context defined by the gpspec\n    - Expands the gptool in the appropriate context\n    - Executes whatever code is present in the gptool\n    - Sends the results to the AI model\n    - Processes the results on return to update the user context (which might include updating files, etc.)\n- A user interface that allows the user to interact with the AI model to refine the results\n- A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n- Professional developers and architects will define collections of gptools for a given vertical\n- Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n- Developers and non-developers can customize gptools for their particular organization or application needs\n- Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible. \n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- lines to change\n+ lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./gptools-overview.gpspec.md.comments.md`\n`````md\n### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n\n`````\n\n","text":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n`````"}}}
{"sha":"f3f79b670736cf95afd1dbded5015a151bb6dea5f12ce62a9a98db8111096869","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"1e15dd716a1487b4"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000,\n  5:     system: [\"system\", \"system.diff\"]\n  6: })\n  7: \n  8: const output = env.file.filename + \".comments.md\"\n  9: def(\"FILE\", env.file)\n 10: \n 11: $`You are an expert Technical documentation reviewer and you will\n 12: create a list of comments about the document FILE. Address any issues\n 13: around spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE`\n 14: \n 15: $`Update your comments in ${output} in markdown .in \n 16: a pseudo diff format as follows:`\n 17: \n 18: $`- comment description\n 19: \\`\\`\\`diff\n 20: 2 or more lines before the section\n 21: - current lines to change\n 22: + new lines to add\n 23: 2 or more lines after the section\n 24: \\`\\`\\`\n 25: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-YHMFRX`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"gptools-overview.gpspec.md.comments.md\",\n  filename: \"gptools-overview.gpspec.md.comments.md\",\n  content: \"### Comments on gptools-overview.gpspec.md\\n\\n1. Typo in the w\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\nsystem: [ \"system\",\n  \"system.diff\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.diff`\n\n```````````````js\n  1: system({ title: \"Diff generation\", description: \"Teaches the diff file format supported by CoArch\" })\n  2: \n  3: $`The DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \n  4: preserve indentation, use relative file path name: \n  5: \n  6: DIFF /path_to_file/file.ts:\n  7: ${env.fence}diff\n  8:   3 lines or more of code above changes\n  9: - deleted line\n 10: - deleted line 2\n 11: + added line\n 12: + added line 2\n 13:   3 lines or more of code after changes\n 14: ${env.fence}\n 15: `\n 16: \n 17: $`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n 18: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\ngptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models are not perfect\" to \"AI models are not always accurate\"\n```diff\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always accurate, and can make mistakes\n```\n\n- Change \"AI models are not transparent\" to \"AI models often lack transparency\"\n```diff\n-   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+   AI models often lack transparency, and it is difficult to understand why they make the decisions they do\n```\n\n- Add \"the\" before \"gptools extension to VS code\"\n```diff\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n+   _the gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements\" to \"A gpspec is a standard markdown file that includes the following additional elements\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file that includes the following additional elements\n```\n\n- Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight is essential for the effective use of AI models.\"\n```diff\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight is essential for the effective use of AI models.\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n```````````````\n\n\n### Extracted Variables\n\n-   `*`\n`````\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n\n`````\n\n-   `*`\n`````\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n\n`````\n\n-   `*`\n`````\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always accurate, and can make mistakes\n\n`````\n\n-   `*`\n`````\n-   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+   AI models often lack transparency, and it is difficult to understand why they make the decisions they do\n\n`````\n\n-   `*`\n`````\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n+   _the gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n`````\n\n-   `*`\n`````\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n\n`````\n\n-   `*`\n`````\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file that includes the following additional elements\n\n`````\n\n-   `*`\n`````\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight is essential for the effective use of AI models.\n\n`````\n\n-   `*`\n`````\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\n`````\n\n","text":"gptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models are not perfect\" to \"AI models are not always accurate\"\n```diff\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always accurate, and can make mistakes\n```\n\n- Change \"AI models are not transparent\" to \"AI models often lack transparency\"\n```diff\n-   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+   AI models often lack transparency, and it is difficult to understand why they make the decisions they do\n```\n\n- Add \"the\" before \"gptools extension to VS code\"\n```diff\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n+   _the gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements\" to \"A gpspec is a standard markdown file that includes the following additional elements\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file that includes the following additional elements\n```\n\n- Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight is essential for the effective use of AI models.\"\n```diff\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight is essential for the effective use of AI models.\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}}}
{"sha":"f3f79b670736cf95afd1dbded5015a151bb6dea5f12ce62a9a98db8111096869","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"1e15dd716a1487b4"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","filename":"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md","type":"replace","range":[[0,0],[52,0]],"text":"### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n"}],"fileEdits":{"/workspaces/coarch/packages/whitepaper/gptools-overview.gpspec.md.comments.md":{"before":"### Comments on gptools-overview.gpspec.md\n\n1. Typo in the word \"reusable\"\n```diff\n- A generic reuseable *gptool*\n+ A generic reusable *gptool*\n```\n\n2. Clarify the sentence about the separation of gptool and gpspec\n```diff\n- By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts that form the basis of shared libraries.\n+ By separating the gptool from the gpspec, we enable gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n```\n\n3. Replace \"code\" with \"gptool\" for consistency\n```diff\n- For example, the spec for code might contain directions on the desired code as well as information about tests to be performed.\n+ For example, the spec for a gptool might contain directions on the desired code as well as information about tests to be performed.\n```\n\n4. Improve clarity in the sentence about invoking a gptool to create a new gpspec\n```diff\n- Note that one use of a gpspec would be to invoke a gptool to create a new gpspec with further refinement.\n+ Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n```\n\n5. Add a comma for better readability\n```diff\n- Just as the development of JavaScript enabled Web 2.0 and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n","after":"### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000\n  5: })\n  6: \n  7: const output = env.file.filename + \".comments.md\"\n  8: def(\"FILE\", env.file)\n  9: \n 10: $`You are an expert Technical documentation reviewer and you will\n 11: create a list of comments about the document FILE. Address any issues\n 12: around spelling, grammar, clarity, and completeness. Explain your answers.`\n 13: \n 14: $`Update your comments in ${output} in markdown in \n 15: a pseudo diff format as follows:`\n 16: \n 17: $`- comment description\n 18: \\`\\`\\`diff\n 19: 2 or more lines before the section\n 20: - current lines to change\n 21: + new lines to add\n 22: 2 or more lines after the section\n 23: \\`\\`\\`\n 24: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-RXNXBH`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"gptools-overview.gpspec.md.comments.md\",\n  filename: \"gptools-overview.gpspec.md.comments.md\",\n  content: \"### Comments on gptools-overview.gpspec.md\\n\\n1. Typo in the w\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.explanations`\n\n```````````````js\n  1: system({ title: \"Explain your answers\" })\n  2: $`When explaining answers, take a deep breath.`\n  3: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen explaining answers, take a deep breath.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n###  template: `system.summary`\n\n```````````````js\n  1: system({\n  2:     title: \"Summarize\",\n  3:     description: \"Generate a summary of the changes\",\n  4: })\n  5: \n  6: $`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n  7: \n  8: def(`SUMMARY`, `This is a summary of the changes in files.`)\n  9: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n`````\nThis is a summary of the changes in files.\n`````\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness. Explain your answers.\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./gptools-overview.gpspec.md.comments.md`\n`````md\n### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n\n`````\n\n","text":"File ./gptools-overview.gpspec.md.comments.md:\n`````\n### Comment 1: Typo in the word \"describe\"\n```diff\n-   use LLM to describe foundation models\n+   Use LLM to describe foundation models\n```\n\n### Comment 2: Inconsistent capitalization in list items\n```diff\n-   AI has important advantages over traditional software\n+   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n```\n\n### Comment 3: Missing colon in list items\n```diff\n-   AI models also have disadvantages\n+   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\n### Comment 4: Typo in the word \"separate\"\n```diff\n- Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n+ Approach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context.\n```\n\n### Comment 5: Inconsistent capitalization in list items\n```diff\n-   Key elements of gptools:\n+   Key elements of gptools:\n    -   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n    -   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n    -   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n    -   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n```\n\n### Comment 6: Missing period at the end of the sentence\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n### Comment 7: Inconsistent capitalization in list items\n```diff\n-   The extension provides the following capabilities:\n+   The extension provides the following capabilities:\n    -   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n    -   A token management system that supports connecting with the AI model of interest\n    -   A runtime environment that:\n```\n`````"}}}
{"sha":"f3f79b670736cf95afd1dbded5015a151bb6dea5f12ce62a9a98db8111096869","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"1e15dd716a1487b4"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000,\n  5:     system: [\"system\", \"system.diff\"]\n  6: })\n  7: \n  8: const output = env.file.filename + \".comments.md\"\n  9: def(\"FILE\", env.file)\n 10: \n 11: $`You are an expert Technical documentation reviewer and you will\n 12: create a list of comments about the document FILE. Address any issues\n 13: around spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE`\n 14: \n 15: $`Update your comments in ${output} in markdown .in \n 16: a pseudo diff format as follows:`\n 17: \n 18: $`- comment description\n 19: \\`\\`\\`diff\n 20: 2 or more lines before the section\n 21: - current lines to change\n 22: + new lines to add\n 23: 2 or more lines after the section\n 24: \\`\\`\\`\n 25: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-NQUNEP`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"gptools-overview.gpspec.md.comments.md\",\n  filename: \"gptools-overview.gpspec.md.comments.md\",\n  content: \"### Comment 1: Typo in the word \\\"describe\\\"\\n```diff\\n-   use L\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\nsystem: [ \"system\",\n  \"system.diff\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.diff`\n\n```````````````js\n  1: system({ title: \"Diff generation\", description: \"Teaches the diff file format supported by CoArch\" })\n  2: \n  3: $`The DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \n  4: preserve indentation, use relative file path name: \n  5: \n  6: DIFF /path_to_file/file.ts:\n  7: ${env.fence}diff\n  8:   3 lines or more of code above changes\n  9: - deleted line\n 10: - deleted line 2\n 11: + added line\n 12: + added line 2\n 13:   3 lines or more of code after changes\n 14: ${env.fence}\n 15: `\n 16: \n 17: $`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n 18: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nUpdate your comments in gptools-overview.gpspec.md.comments.md in markdown .in \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\ngptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Add a comma after \"AI models can perform tasks normal software cannot\"\n```diff\n-   AI models can perform tasks normal software cannot\n+   AI models can perform tasks normal software cannot,\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n-   AI models are best used to augment human workflows, not replace them\n+   AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Add a comma after \"Goals: support tool abstraction\"\n```diff\n-   Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+   Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Add a comma after \"A gpspec is a standard markdown file\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements:\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n```````````````\n\n\n### Extracted Variables\n\n-   `*`\n`````\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n\n`````\n\n-   `*`\n`````\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n\n`````\n\n-   `*`\n`````\n-   AI models can perform tasks normal software cannot\n+   AI models can perform tasks normal software cannot,\n\n`````\n\n-   `*`\n`````\n-   AI models are best used to augment human workflows, not replace them\n+   AI models are best suited for augmenting human workflows rather than replacing them\n\n`````\n\n-   `*`\n`````\n-   Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+   Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n\n`````\n\n-   `*`\n`````\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n\n`````\n\n-   `*`\n`````\n-   A gpspec is a standard markdown file, with the following additional elements:\n+   A gpspec is a standard markdown file, with the following additional elements:\n\n`````\n\n-   `*`\n`````\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\n`````\n\n","text":"gptools-overview.gpspec.md.comments.md:\n\n- Fix typo \"LLM\" to \"LM\"\n```diff\n-   use LLM to describe foundation models\n+   use LM to describe foundation models\n```\n\n- Change \"aka LLMs\" to \"also known as LMs\"\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (also known as LMs) have created new opportunities for automating complex workflows.\n```\n\n- Add a comma after \"AI models can perform tasks normal software cannot\"\n```diff\n-   AI models can perform tasks normal software cannot\n+   AI models can perform tasks normal software cannot,\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n-   AI models are best used to augment human workflows, not replace them\n+   AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Add a comma after \"Goals: support tool abstraction\"\n```diff\n-   Goals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n+   Goals: support tool abstraction, modularity, reuse, but at the same time, empower non-developers to author, maintain, and update AI-enhanced scripts\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components\n```\n\n- Add a comma after \"A gpspec is a standard markdown file\"\n```diff\n-   A gpspec is a standard markdown file, with the following additional elements:\n+   A gpspec is a standard markdown file, with the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n-   Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+   Just as the development of JavaScript enabled Web 2.0 and Python facilitated the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}}}
{"sha":"f3f79b670736cf95afd1dbded5015a151bb6dea5f12ce62a9a98db8111096869","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"1e15dd716a1487b4"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000,\n  5:     system: [\"system\", \"system.diff\"]\n  6: })\n  7: \n  8: const output = env.file.filename + \".comments.md\"\n  9: def(\"FILE\", env.file)\n 10: \n 11: $`You are an expert Technical documentation reviewer and you will\n 12: create a list of comments about the document FILE. Address any issues\n 13: around spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE`\n 14: \n 15: $`Generate your comments in markdown using \n 16: a pseudo diff format as follows:`\n 17: \n 18: $`- comment description\n 19: \\`\\`\\`diff\n 20: 2 or more lines before the section\n 21: - current lines to change\n 22: + new lines to add\n 23: 2 or more lines after the section\n 24: \\`\\`\\`\n 25: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-AHPNWD`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\nsystem: [ \"system\",\n  \"system.diff\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.diff`\n\n```````````````js\n  1: system({ title: \"Diff generation\", description: \"Teaches the diff file format supported by CoArch\" })\n  2: \n  3: $`The DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \n  4: preserve indentation, use relative file path name: \n  5: \n  6: DIFF /path_to_file/file.ts:\n  7: ${env.fence}diff\n  8:   3 lines or more of code above changes\n  9: - deleted line\n 10: - deleted line 2\n 11: + added line\n 12: + added line 2\n 13:   3 lines or more of code after changes\n 14: ${env.fence}\n 15: `\n 16: \n 17: $`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n 18: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- comment description\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\n- Replace \"aka\" with \"also known as\"\n```diff\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models can perform tasks normal software cannot\" to \"AI models can perform tasks that normal software cannot\"\n```diff\n- AI models can perform tasks normal software cannot\n+ AI models can perform tasks that normal software cannot\n```\n\n- Change \"AI models are not perfect, and can make mistakes\" to \"AI models are not perfect and can make mistakes\"\n```diff\n- AI models are not perfect, and can make mistakes\n+ AI models are not perfect and can make mistakes\n```\n\n- Change \"AI models are not transparent, and it is difficult to understand why they make the decisions they do\" to \"AI models are not transparent, making it difficult to understand why they make the decisions they do\"\n```diff\n- AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+ AI models are not transparent, making it difficult to understand why they make the decisions they do\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n- AI models are best used to augment human workflows, not replace them\n+ AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n- A gptool is a script with the following components\n+ A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements:\" to \"A gpspec is a standard markdown file that includes the following additional elements:\"\n```diff\n- A gpspec is a standard markdown file, with the following additional elements:\n+ A gpspec is a standard markdown file that includes the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n- Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```\n```````````````\n\n\n### Extracted Variables\n\n-   `*`\n`````\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n\n`````\n\n-   `*`\n`````\n- AI models can perform tasks normal software cannot\n+ AI models can perform tasks that normal software cannot\n\n`````\n\n-   `*`\n`````\n- AI models are not perfect, and can make mistakes\n+ AI models are not perfect and can make mistakes\n\n`````\n\n-   `*`\n`````\n- AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+ AI models are not transparent, making it difficult to understand why they make the decisions they do\n\n`````\n\n-   `*`\n`````\n- AI models are best used to augment human workflows, not replace them\n+ AI models are best suited for augmenting human workflows rather than replacing them\n\n`````\n\n-   `*`\n`````\n- A gptool is a script with the following components\n+ A gptool is a script that consists of the following components\n\n`````\n\n-   `*`\n`````\n- A gpspec is a standard markdown file, with the following additional elements:\n+ A gpspec is a standard markdown file that includes the following additional elements:\n\n`````\n\n-   `*`\n`````\n- Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\n`````\n\n","text":"- Replace \"aka\" with \"also known as\"\n```diff\n- The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+ The recent development of foundation models (also known as LLMs) have created new opportunities for automating complex workflows.\n```\n\n- Change \"AI models can perform tasks normal software cannot\" to \"AI models can perform tasks that normal software cannot\"\n```diff\n- AI models can perform tasks normal software cannot\n+ AI models can perform tasks that normal software cannot\n```\n\n- Change \"AI models are not perfect, and can make mistakes\" to \"AI models are not perfect and can make mistakes\"\n```diff\n- AI models are not perfect, and can make mistakes\n+ AI models are not perfect and can make mistakes\n```\n\n- Change \"AI models are not transparent, and it is difficult to understand why they make the decisions they do\" to \"AI models are not transparent, making it difficult to understand why they make the decisions they do\"\n```diff\n- AI models are not transparent, and it is difficult to understand why they make the decisions they do\n+ AI models are not transparent, making it difficult to understand why they make the decisions they do\n```\n\n- Change \"AI models are best used to augment human workflows, not replace them\" to \"AI models are best suited for augmenting human workflows rather than replacing them\"\n```diff\n- AI models are best used to augment human workflows, not replace them\n+ AI models are best suited for augmenting human workflows rather than replacing them\n```\n\n- Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components\"\n```diff\n- A gptool is a script with the following components\n+ A gptool is a script that consists of the following components\n```\n\n- Change \"A gpspec is a standard markdown file, with the following additional elements:\" to \"A gpspec is a standard markdown file that includes the following additional elements:\"\n```diff\n- A gpspec is a standard markdown file, with the following additional elements:\n+ A gpspec is a standard markdown file that includes the following additional elements:\n```\n\n- Change \"Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\" to \"Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\"\n```diff\n- Just as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n+ Just as the development of JavaScript enabled Web 2.0 and Python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n```"}}}
{"sha":"f3f79b670736cf95afd1dbded5015a151bb6dea5f12ce62a9a98db8111096869","key":{"template":{"id":"add-comments","title":"Add Comments"},"fragment":{"fullId":"gptools-overview.gpspec.md:0:0","hash":"1e15dd716a1487b4"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"Add Comments\" (`add-comments`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"Add Comments\",\n  3:     description: \"Review each chapter and adds a comment as a technical reviewer\",\n  4:     maxTokens: 4000,\n  5:     system: [\"system\", \"system.diff\"]\n  6: })\n  7: \n  8: const output = env.file.filename + \".comments.md\"\n  9: def(\"FILE\", env.file)\n 10: \n 11: $`You are an expert Technical documentation reviewer and you will\n 12: create a list of comments about the document FILE. Address any issues\n 13: around spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE`\n 14: \n 15: $`Generate your comments in markdown using \n 16: a pseudo diff format as follows:`\n 17: \n 18: $`- summary and reason of the change (don't emit \"summary:\")\n 19: \\`\\`\\`diff\n 20: 2 or more lines before the section\n 21: - current lines to change\n 22: + new lines to add\n 23: 2 or more lines after the section\n 24: \\`\\`\\`\n 25: `\n```````````````\n\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- summary and reason of the change (don't emit \"summary:\")\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-PFXIDE`\n\n-   env.**file**\n```````````````js\n{ filename: \"gptools-overview.gpspec.md\",\nlabel: \"current\",\ncontent: \"# gptools: Empowering Human Workflows with AI-Enhanced Tools\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"add-comments\",\n  title: \"Add Comments\",\n  description: \"Review each chapter and adds a comment as a technical review\"... },\n{ id: \"bug-with-output-spec_2\",\n  title: \"gen to non-coarch file\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-abstract\",\n  title: \"generate-abstract\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-introduction\",\n  title: \"generate-introduction\",\n  description: \"Given files about a project and the goal of writing a white \"... },\n{ id: \"generate-outline\",\n  title: \"generate-outline\",\n  description: \"Given markdown files describing a project, generate an outli\"... },\n{ id: \"summarize-project\",\n  title: \"summarize-project\",\n  description: \"Given markdown files describing a project, generate a summar\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"add-comments\",\ntitle: \"Add Comments\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Add Comments\\\",\\n    description: \\\"Review\"...,\nfilename: \"/workspaces/coarch/packages/whitepaper/gptools/add-comments.\"...,\ndescription: \"Review each chapter and adds a comment as a technical review\"...,\nmaxTokens: 4000,\nsystem: [ \"system\",\n  \"system.diff\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.diff`\n\n```````````````js\n  1: system({ title: \"Diff generation\", description: \"Teaches the diff file format supported by CoArch\" })\n  2: \n  3: $`The DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \n  4: preserve indentation, use relative file path name: \n  5: \n  6: DIFF /path_to_file/file.ts:\n  7: ${env.fence}diff\n  8:   3 lines or more of code above changes\n  9: - deleted line\n 10: - deleted line 2\n 11: + added line\n 12: + added line 2\n 13:   3 lines or more of code after changes\n 14: ${env.fence}\n 15: `\n 16: \n 17: $`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n 18: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +, deleted lines start with -, do not add line numbers, \npreserve indentation, use relative file path name: \n\nDIFF /path_to_file/file.ts:\n`````diff\n  3 lines or more of code above changes\n- deleted line\n- deleted line 2\n+ added line\n+ added line 2\n  3 lines or more of code after changes\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 4000\n\n```````````````markdown\nFILE:\n````` file=gptools-overview.gpspec.md\n# gptools: Empowering Human Workflows with AI-Enhanced Tools\n\n-   Authors: Peli de Halleux, Michał Moskal, Ben Zorn\n-   Date: October 2023\n-   use LLM to describe foundation models\n-   [gptools-overview.gpspec.md.comments.md](./gptools-overview.gpspec.md.comments.md)\n\n## Complex Artifacts Require Complex Workflows\n\n-   Software development is a complex process that requires the coordination of many different activities.\n-   Historically, software development has been a highly manual process, with developers using a variety of tools to create and maintain the artifacts that comprise a software system.\n-   Over time abstractions have been developed to help manage the complexity of software development.\n    -   Important examples include: Unix utilities and pipes, makefiles, build scripts, etc.\n-   Modern software development includes many automated processes as well as manual processes such as code review, design review, bug triage, etc.\n\n## Foundation Models Create New Opportunities\n\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n-   AI has important advantages over traditional software:\n    -   AI models can perform tasks normal software cannot\n    -   AI models can be instructed using natural language, allowing non-programmers to use them\n-   AI models also have disadvantages:\n    -   AI models are not perfect, and can make mistakes\n    -   AI models are not transparent, and it is difficult to understand why they make the decisions they do\n-   AI models are best used to augment human workflows, not replace them\n\n## gptools - a Framework for AI-Enhanced Workflows\n\nVision: empower teams, including non-developers, to use AI-enhanced scripts to support their efforts to create, understand, and maintain complex artifacts\n\nGoals: support tool abstraction, modularity, reuse, but at the same time empower non-developers to author, maintain, and update AI-enhanced scripts\n\nApproach: Foundation models enable a new kind of scripting that allows script writers to achieve both greater functionality and greater ease of use. We separate scripts into two related parts: a generic reusable _gptool_ and a natural language _gpspec_ that instantiates the gptool in a particular context\n\nKey elements of gptools:\n\n-   _gptools_ – Scripts that integrate traditional code and natural language and leverage foundation models in their execution\n-   _gpspecs_ – Natural language documents that instantiate gptools in a particular context\n-   _gpvm_ – A framework and runtime system that executes gpspecs and gptools\n-   _gptools extension to VS code_ – supporting seamless user interaction with gptools\n\n## gptool: A New Kind of Script\n\n-   A gptool is a script with the following components\n\n    -   A header that contains metadata related to the execution of the script (e.g., information about what LLM model to use, etc.)\n    -   A natural language prompt intended to be processed by a foundation model\n    -   An environment context that augments the natural language with additional data/information\n    -   Programming language constructs that are used to programmatically manipulate both inputs and outputs\n\n-   Benefits of gptools\n    -   By separating the gptool from the gpspec, we allow gptools to become highly engineered shared artifacts, forming the basis of shared libraries.\n    -   A gptool can be used in many different contexts, and can be updated and maintained independently of the gpspecs that use it.\n    -   By separating the gptool from the gpspec, we allow non-developers to use gptools without having to understand the details of how they work.\n    -   At the same time, because a gptool contains a natural language prompt, it is easy for a non-developer to understand what the gptool does, and to modify it to suit their needs.\n\n## gpspec: Natural language to invoke a gptool\n\nJust as a chat enables a user to interact with an AI model, a gpspec is a natural language markdown document that defines a context in which to invoke a gptool.\n\nA gpspec is a standard markdown file, with the following additional elements:\n\n-   Links to context elements that define the context in which a particular gptool is to be invoked. The gpspec defines all possible contexts where a particular gptool might only refer to some part.\n-   Natural language describing the specific task to be performed as input to one or more gptools. For example, the spec for code might contain directions on the desired code as well as information about tests to be performed. Different gptools invoked from the gpspec file can be used to perform different tasks.\n\nNote that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n\n## gptools Extension to VS Code\n\nWe believe that human oversight of AI models is essential to their effective use. To support this, we have created a VS Code extension that allows a user to interact with a gpspec and gptool in a natural way.\n\nThe extension provides the following capabilities:\n\n-   A command palette that allows a user to select a gptool to invoke in the context of a given gpspec file\n-   A token management system that supports connecting with the AI model of interest\n-   A runtime environment that:\n    -   Captures the context defined by the gpspec\n    -   Expands the gptool in the appropriate context\n    -   Executes whatever code is present in the gptool\n    -   Sends the results to the AI model\n    -   Processes the results on return to update the user context (which might include updating files, etc.)\n-   A user interface that allows the user to interact with the AI model to refine the results\n-   A gptool trace viewing mechanism that allows users to understand how the AI model was used to generate the results\n\n## Implications of gptools\n\nThe existence of powerful programming tools based on AI that are usable by non-developers is transformative.\n\nJust as the development of JavaScript enabled Web 2.0, and python enabled the creation of the current AI software ecosystem, gptools will fuel a new generation of AI-enhanced applications.\n\nWe envision the creation of gptools for many different verticals, with opportunities for customization and authoring at many levels of expertise:\n\n-   Professional developers and architects will define collections of gptools for a given vertical\n-   Professional developers can author and maintain individual gptools just as packages are authored and maintained today\n-   Developers and non-developers can customize gptools for their particular organization or application needs\n-   Non-developers can author and maintain gpspecs for their particular projects\n\nFurthermore, the existence of gptools can empower non-developers to automate their workflows in ways that were previously impossible.\n`````\n\nYou are an expert Technical documentation reviewer and you will\ncreate a list of comments about the document FILE. Address any issues\naround spelling, grammar, clarity, and completeness in FILE. Explain your answers. Only add comments if they required a change in FILE\n\nGenerate your comments in markdown using \na pseudo diff format as follows:\n\n- summary and reason of the change (don't emit \"summary:\")\n```diff\n2 or more lines before the section\n- current lines to change\n+ new lines to add\n2 or more lines after the section\n```\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nComment 1: Fix typo in the word \"describe\"\nReason: There is a typo in the word \"describe\" which should be corrected for better readability.\n\n```diff\n-   use LLM to describe foundation models\n+   use LLM to describe foundation models\n```\n\nComment 2: Add a comma after \"aka LLMs\"\nReason: Adding a comma after \"aka LLMs\" improves the sentence structure and readability.\n\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (aka LLMs,) have created new opportunities for automating complex workflows.\n```\n\nComment 3: Change \"AI models are not perfect\" to \"AI models are not always perfect\"\nReason: The current statement might be perceived as too negative. Adding \"always\" softens the tone and acknowledges that AI models can sometimes be accurate.\n\n```diff\n  AI models also have disadvantages:\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always perfect, and can make mistakes\n    AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\nComment 4: Change \"gptools - a Framework for AI-Enhanced Workflows\" to \"gptools: A Framework for AI-Enhanced Workflows\"\nReason: Consistency in section title formatting.\n\n```diff\n-   gptools - a Framework for AI-Enhanced Workflows\n+   gptools: A Framework for AI-Enhanced Workflows\n```\n\nComment 5: Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components:\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptool: A New Kind of Script\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components:\n```\n\nComment 6: Add a comma after \"For example\"\nReason: Adding a comma after \"For example\" improves the sentence structure and readability.\n\n```diff\n  Different gptools invoked from the gpspec file can be used to perform different tasks.\n-   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n+   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec, with further refinement.\n```\n\nComment 7: Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight of AI models is essential for their effective use.\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptools Extension to VS Code\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight of AI models is essential for their effective use.\n```\n```````````````\n\n\n### Extracted Variables\n\n-   `*`\n`````\n-   use LLM to describe foundation models\n+   use LLM to describe foundation models\n\n`````\n\n-   `*`\n`````\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (aka LLMs,) have created new opportunities for automating complex workflows.\n\n`````\n\n-   `*`\n`````\n  AI models also have disadvantages:\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always perfect, and can make mistakes\n    AI models are not transparent, and it is difficult to understand why they make the decisions they do\n\n`````\n\n-   `*`\n`````\n-   gptools - a Framework for AI-Enhanced Workflows\n+   gptools: A Framework for AI-Enhanced Workflows\n\n`````\n\n-   `*`\n`````\n  gptool: A New Kind of Script\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components:\n\n`````\n\n-   `*`\n`````\n  Different gptools invoked from the gpspec file can be used to perform different tasks.\n-   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n+   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec, with further refinement.\n\n`````\n\n-   `*`\n`````\n  gptools Extension to VS Code\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight of AI models is essential for their effective use.\n\n`````\n\n","text":"Comment 1: Fix typo in the word \"describe\"\nReason: There is a typo in the word \"describe\" which should be corrected for better readability.\n\n```diff\n-   use LLM to describe foundation models\n+   use LLM to describe foundation models\n```\n\nComment 2: Add a comma after \"aka LLMs\"\nReason: Adding a comma after \"aka LLMs\" improves the sentence structure and readability.\n\n```diff\n-   The recent development of foundation models (aka LLMs) have created new opportunities for automating complex workflows.\n+   The recent development of foundation models (aka LLMs,) have created new opportunities for automating complex workflows.\n```\n\nComment 3: Change \"AI models are not perfect\" to \"AI models are not always perfect\"\nReason: The current statement might be perceived as too negative. Adding \"always\" softens the tone and acknowledges that AI models can sometimes be accurate.\n\n```diff\n  AI models also have disadvantages:\n-   AI models are not perfect, and can make mistakes\n+   AI models are not always perfect, and can make mistakes\n    AI models are not transparent, and it is difficult to understand why they make the decisions they do\n```\n\nComment 4: Change \"gptools - a Framework for AI-Enhanced Workflows\" to \"gptools: A Framework for AI-Enhanced Workflows\"\nReason: Consistency in section title formatting.\n\n```diff\n-   gptools - a Framework for AI-Enhanced Workflows\n+   gptools: A Framework for AI-Enhanced Workflows\n```\n\nComment 5: Change \"A gptool is a script with the following components\" to \"A gptool is a script that consists of the following components:\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptool: A New Kind of Script\n-   A gptool is a script with the following components\n+   A gptool is a script that consists of the following components:\n```\n\nComment 6: Add a comma after \"For example\"\nReason: Adding a comma after \"For example\" improves the sentence structure and readability.\n\n```diff\n  Different gptools invoked from the gpspec file can be used to perform different tasks.\n-   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec with further refinement.\n+   Note that one possible use of a gpspec is to invoke a gptool, which in turn creates a new gpspec, with further refinement.\n```\n\nComment 7: Change \"We believe that human oversight of AI models is essential to their effective use.\" to \"We believe that human oversight of AI models is essential for their effective use.\"\nReason: Improves sentence clarity and structure.\n\n```diff\n  gptools Extension to VS Code\n-   We believe that human oversight of AI models is essential to their effective use.\n+   We believe that human oversight of AI models is essential for their effective use.\n```"}}}
