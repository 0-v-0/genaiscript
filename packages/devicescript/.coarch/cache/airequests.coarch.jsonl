{"sha":"6681a4e4155c9fbf05b38468e0eef249d6c01fca1879ee9ea39eba958541cec6","key":{"template":{"id":"firmware","title":"firmware"},"fragment":{"fullId":"pcf8563.coarch.md:0:0","hash":"ecf189609b653278"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/devicescript/pcf8563.ts","filename":"/workspaces/coarch/packages/devicescript/pcf8563.ts","type":"createfile","text":"import { I2CDevice } from \"@devicescript/drivers\";\n\nconst PCF8563_I2C_ADDRESS = 0x51; // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02; // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDevice {\n  constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Reads the time and returns a JavaScript Date object.\n   */\n  readTime(): Date {\n    const data = this.readRegister(REG_SECONDS, 7);\n    const seconds = data[0] & 0x7F;\n    const minutes = data[1] & 0x7F;\n    const hours = data[2] & 0x3F;\n    const days = data[3] & 0x3F;\n    const months = data[5] & 0x1F;\n    const years = data[6] & 0xFF;\n\n    return new Date(2000 + years, months - 1, days, hours, minutes, seconds);\n  }\n\n  // Functions to support implementing the Jacdac service\n}\n","overwrite":true},{"label":"Create /workspaces/coarch/packages/devicescript/main.ts","filename":"/workspaces/coarch/packages/devicescript/main.ts","type":"createfile","text":"import { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\n\nfunction displayTime() {\n  const currentTime = rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\ndisplayTime();\n","overwrite":true},{"label":"Create /workspaces/coarch/packages/devicescript/README.md","filename":"/workspaces/coarch/packages/devicescript/README.md","type":"createfile","text":"# PCF8563 DeviceScript Driver\n\nThis driver is for the PCF8563 real-time-clock (RTC) peripherical.\n\nSources used to generate the code:\n- [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Usage\n\nImport the `PCF8563` class from `pcf8563.ts` and create an instance. Use the `readTime()` function to get the current time as a JavaScript Date object.\n\nExample:\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\nconst currentTime = rtc.readTime();\nconsole.log(`Current time: ${currentTime}`);\n```\n","overwrite":true},{"label":"firmware","filename":"/workspaces/coarch/packages/devicescript/pcf8563.coarch.md","type":"insert","pos":[6,93],"text":"\n\n-   [pcf8563.ts](./pcf8563.ts)\n-   [main.ts](./main.ts)\n-   [README.md](./README.md)"}],"fileEdits":{"/workspaces/coarch/packages/devicescript/pcf8563.ts":{"before":null,"after":"import { I2CDevice } from \"@devicescript/drivers\";\n\nconst PCF8563_I2C_ADDRESS = 0x51; // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02; // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDevice {\n  constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Reads the time and returns a JavaScript Date object.\n   */\n  readTime(): Date {\n    const data = this.readRegister(REG_SECONDS, 7);\n    const seconds = data[0] & 0x7F;\n    const minutes = data[1] & 0x7F;\n    const hours = data[2] & 0x3F;\n    const days = data[3] & 0x3F;\n    const months = data[5] & 0x1F;\n    const years = data[6] & 0xFF;\n\n    return new Date(2000 + years, months - 1, days, hours, minutes, seconds);\n  }\n\n  // Functions to support implementing the Jacdac service\n}\n"},"/workspaces/coarch/packages/devicescript/main.ts":{"before":null,"after":"import { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\n\nfunction displayTime() {\n  const currentTime = rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\ndisplayTime();\n"},"/workspaces/coarch/packages/devicescript/README.md":{"before":null,"after":"# PCF8563 DeviceScript Driver\n\nThis driver is for the PCF8563 real-time-clock (RTC) peripherical.\n\nSources used to generate the code:\n- [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Usage\n\nImport the `PCF8563` class from `pcf8563.ts` and create an instance. Use the `readTime()` function to get the current time as a JavaScript Date object.\n\nExample:\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\nconst currentTime = rtc.readTime();\nconsole.log(`Current time: ${currentTime}`);\n```\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"firmware\" (`firmware`)\n\n```````````````js\n  1: prompt({\n  2:     title: \"firmware\",\n  3:     description: \"Compile information about various sources to generate DeviceScript driver.\",\n  4:     categories: [\"devicescript\"]\n  5: })\n  6: \n  7: def(\"SPEC\", env.file)\n  8: \n  9: $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n 10: Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n 11: \n 12: $`The base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\n 13: The symbols are in the '@devicescript/drivers' module.`\n 14: \n 15: $`Generate seperate constants for each magic number and specify where the constant value was found`\n 16: $`Generate comments for each function.`\n 17: $`In the driver class documention, generate the list of sources used to generate the code.`\n 18: \n 19: $`Generate an example file (with filename starting with 'main${env.file.filename.replace(`.coarch.md`, '')}') that uses the driver \n 20: and displays meaningful information to the console.`\n 21: \n 22: $`\n 23: TypeScript style guidance:\n 24: -  Use export keyboard on classes.\n 25: `\n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.devicescript** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n-   [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   add functions to support implementing the Jacdac service\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\nGenerate seperate constants for each magic number and specify where the constant value was found\n\nGenerate comments for each function.\n\nIn the driver class documention, generate the list of sources used to generate the code.\n\nGenerate an example file (with filename starting with 'main/workspaces/coarch/packages/devicescript/pcf8563') that uses the driver \nand displays meaningful information to the console.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-RWRKCN`\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/devicescript/pcf8563.coarch.md\",\nlabel: \"current\",\ncontent: \"# PCF8563\\n\\nThe PCF8563 peripherical is a real-time-clock (RT\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[  ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"firmware\",\n  title: \"firmware\",\n  description: \"Compile information about various sources to generate Device\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"firmware\",\ntitle: \"firmware\",\ntext: \"<nothing yet>\",\njsSource: \"prompt({\\n    title: \\\"firmware\\\",\\n    description: \\\"Compile in\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/prompts/firmware.pr\"...,\ndescription: \"Compile information about various sources to generate Device\"...,\ncategories: [ \"devicescript\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: systemPrompt({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\". Do not respond unchanged files.`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\". Do not respond unchanged files.\n\nWhen explaining answers, take a deep breath.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n-   [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   add functions to support implementing the Jacdac service\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\nGenerate seperate constants for each magic number and specify where the constant value was found\n\nGenerate comments for each function.\n\nIn the driver class documention, generate the list of sources used to generate the code.\n\nGenerate an example file (with filename starting with 'main/workspaces/coarch/packages/devicescript/pcf8563') that uses the driver \nand displays meaningful information to the console.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./pcf8563.ts:\n`````\nimport { I2CDevice } from \"@devicescript/drivers\";\n\nconst PCF8563_I2C_ADDRESS = 0x51; // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02; // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDevice {\n  constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Reads the time and returns a JavaScript Date object.\n   */\n  readTime(): Date {\n    const data = this.readRegister(REG_SECONDS, 7);\n    const seconds = data[0] & 0x7F;\n    const minutes = data[1] & 0x7F;\n    const hours = data[2] & 0x3F;\n    const days = data[3] & 0x3F;\n    const months = data[5] & 0x1F;\n    const years = data[6] & 0xFF;\n\n    return new Date(2000 + years, months - 1, days, hours, minutes, seconds);\n  }\n\n  // Functions to support implementing the Jacdac service\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\n\nfunction displayTime() {\n  const currentTime = rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\ndisplayTime();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis driver is for the PCF8563 real-time-clock (RTC) peripherical.\n\nSources used to generate the code:\n- [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Usage\n\nImport the `PCF8563` class from `pcf8563.ts` and create an instance. Use the `readTime()` function to get the current time as a JavaScript Date object.\n\nExample:\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\nconst currentTime = rtc.readTime();\nconsole.log(`Current time: ${currentTime}`);\n```\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./pcf8563.ts`\n`````ts\nimport { I2CDevice } from \"@devicescript/drivers\";\n\nconst PCF8563_I2C_ADDRESS = 0x51; // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02; // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDevice {\n  constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Reads the time and returns a JavaScript Date object.\n   */\n  readTime(): Date {\n    const data = this.readRegister(REG_SECONDS, 7);\n    const seconds = data[0] & 0x7F;\n    const minutes = data[1] & 0x7F;\n    const hours = data[2] & 0x3F;\n    const days = data[3] & 0x3F;\n    const months = data[5] & 0x1F;\n    const years = data[6] & 0xFF;\n\n    return new Date(2000 + years, months - 1, days, hours, minutes, seconds);\n  }\n\n  // Functions to support implementing the Jacdac service\n}\n\n`````\n\n-   `File ./main.ts`\n`````ts\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\n\nfunction displayTime() {\n  const currentTime = rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\ndisplayTime();\n\n`````\n\n-   `File ./README.md`\n`````md\n# PCF8563 DeviceScript Driver\n\nThis driver is for the PCF8563 real-time-clock (RTC) peripherical.\n\nSources used to generate the code:\n- [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Usage\n\nImport the `PCF8563` class from `pcf8563.ts` and create an instance. Use the `readTime()` function to get the current time as a JavaScript Date object.\n\nExample:\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\nconst currentTime = rtc.readTime();\nconsole.log(`Current time: ${currentTime}`);\n```\n\n`````\n\n","text":"File ./pcf8563.ts:\n`````\nimport { I2CDevice } from \"@devicescript/drivers\";\n\nconst PCF8563_I2C_ADDRESS = 0x51; // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02; // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDevice {\n  constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Reads the time and returns a JavaScript Date object.\n   */\n  readTime(): Date {\n    const data = this.readRegister(REG_SECONDS, 7);\n    const seconds = data[0] & 0x7F;\n    const minutes = data[1] & 0x7F;\n    const hours = data[2] & 0x3F;\n    const days = data[3] & 0x3F;\n    const months = data[5] & 0x1F;\n    const years = data[6] & 0xFF;\n\n    return new Date(2000 + years, months - 1, days, hours, minutes, seconds);\n  }\n\n  // Functions to support implementing the Jacdac service\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\n\nfunction displayTime() {\n  const currentTime = rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\ndisplayTime();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis driver is for the PCF8563 real-time-clock (RTC) peripherical.\n\nSources used to generate the code:\n- [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [Jacdac service](https://github.com/microsoft/jacdac/blob/main/services/realtimeclock.md)\n\n## Usage\n\nImport the `PCF8563` class from `pcf8563.ts` and create an instance. Use the `readTime()` function to get the current time as a JavaScript Date object.\n\nExample:\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563();\nconst currentTime = rtc.readTime();\nconsole.log(`Current time: ${currentTime}`);\n```\n`````"}}}
{"sha":"bca11252e7f010cafbfca1563495fa22109299d4b55c028822a8908dd6dc13c0","key":{"template":{"id":"firmware","title":"firmware"},"fragment":{"fullId":"src/pcf8563.coarch.md:0:0","hash":"13a4442464ff3a2e"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/devicescript/src/pcf8563.ts","filename":"/workspaces/coarch/packages/devicescript/src/pcf8563.ts","type":"replace","range":[[0,0],[27,0]],"text":"import { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async init(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n"},{"label":"Update /workspaces/coarch/packages/devicescript/src/main.ts","filename":"/workspaces/coarch/packages/devicescript/src/main.ts","type":"replace","range":[[0,0],[11,0]],"text":"import { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n"},{"label":"Create /workspaces/coarch/packages/devicescript/src/README.md","filename":"/workspaces/coarch/packages/devicescript/src/README.md","type":"createfile","text":"# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n","overwrite":true}],"fileEdits":{"/workspaces/coarch/packages/devicescript/src/pcf8563.ts":{"before":"import { I2CDriver } from \"@devicescript/drivers\"\n\nconst PCF8563_I2C_ADDRESS = 0x51 // Default I2C address found in datasheet\nconst REG_SECONDS = 0x02 // Register address for seconds found in datasheet\n\nexport class PCF8563 extends I2CDriver {\n    constructor(i2cAddress: number = PCF8563_I2C_ADDRESS) {\n        super(i2cAddress)\n    }\n\n    protected async initDriver(): Promise<void> {}\n\n    /**\n     * Reads the time and returns a JavaScript Date object.\n     */\n    async readTime() {\n        const data = await this.readRegBuf(REG_SECONDS, 7)\n        const seconds = data[0] & 0x7f\n        const minutes = data[1] & 0x7f\n        const hours = data[2] & 0x3f\n        const days = data[3] & 0x3f\n        const months = (data[5] & 0x1f) - 1\n        const years = data[6] & 0xff\n\n        return { years, months, days, hours, minutes, seconds }\n    }\n}\n","after":"import { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async init(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n"},"/workspaces/coarch/packages/devicescript/src/main.ts":{"before":"import { pins, board } from \"@dsboard/seeed_xiao_esp32c3\"\nimport { PCF8563 } from \"./pcf8563\"\n\nconst rtc = new PCF8563()\n\nasync function displayTime() {\n    const currentTime = await rtc.readTime()\n    console.log(`Current time: ${currentTime}`)\n}\n\nawait displayTime()\n","after":"import { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n"},"/workspaces/coarch/packages/devicescript/src/README.md":{"before":null,"after":"# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"firmware\" (`firmware`)\n\n```````````````js\n  1: prompt({\n  2:     title: \"firmware\",\n  3:     description: \"Compile information about various sources to generate DeviceScript driver.\",\n  4:     categories: [\"devicescript\"]\n  5: })\n  6: \n  7: def(\"SPEC\", env.file)\n  8: \n  9: $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n 10: Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n 11: \n 12: $`The base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\n 13: The symbols are in the '@devicescript/drivers' module.`\n 14: \n 15: $`Generate seperate constants for each magic number and specify where the constant value was found`\n 16: $`Generate comments for each function.`\n 17: $`In the driver class documention, generate the list of sources used to generate the code.`\n 18: \n 19: $`Generate an example file (with filename starting with 'main${env.file.filename.replace(`.coarch.md`, '')}') that uses the driver \n 20: and displays meaningful information to the console.`\n 21: \n 22: $`\n 23: TypeScript style guidance:\n 24: -  Use export keyboard on classes.\n 25: -  always await async functions or functions that return a Promise\n 26: `\n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.devicescript** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n-   [pcf8563.ts](./pcf8563.ts)\n-   [main.ts](./main.ts)\n-   [README.md](./README.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   generate device initialization sequence\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\nGenerate seperate constants for each magic number and specify where the constant value was found\n\nGenerate comments for each function.\n\nIn the driver class documention, generate the list of sources used to generate the code.\n\nGenerate an example file (with filename starting with 'main/workspaces/coarch/packages/devicescript/src/pcf8563') that uses the driver \nand displays meaningful information to the console.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  always await async functions or functions that return a Promise\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-VCXGHK`\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.\"...,\nlabel: \"current\",\ncontent: \"# PCF8563\\n\\nThe PCF8563 peripherical is a real-time-clock (RT\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"pcf8563.ts\",\n  filename: \"src/pcf8563.ts\",\n  content: \"import { I2CDriver } from \\\"@devicescript/drivers\\\"\\n\\nconst PCF\"... },\n{ label: \"main.ts\",\n  filename: \"src/main.ts\",\n  content: \"import { pins, board } from \\\"@dsboard/seeed_xiao_esp32c3\\\"\\nim\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"firmware\",\n  title: \"firmware\",\n  description: \"Compile information about various sources to generate Device\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"firmware\",\ntitle: \"firmware\",\ntext: \"<nothing yet>\",\njsSource: \"prompt({\\n    title: \\\"firmware\\\",\\n    description: \\\"Compile in\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/prompts/firmware.pr\"...,\ndescription: \"Compile information about various sources to generate Device\"...,\ncategories: [ \"devicescript\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: systemPrompt({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\". Do not respond unchanged files.`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\". Do not respond unchanged files.\n\nWhen explaining answers, take a deep breath.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n-   [pcf8563.ts](./pcf8563.ts)\n-   [main.ts](./main.ts)\n-   [README.md](./README.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   generate device initialization sequence\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\nGenerate seperate constants for each magic number and specify where the constant value was found\n\nGenerate comments for each function.\n\nIn the driver class documention, generate the list of sources used to generate the code.\n\nGenerate an example file (with filename starting with 'main/workspaces/coarch/packages/devicescript/src/pcf8563') that uses the driver \nand displays meaningful information to the console.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  always await async functions or functions that return a Promise\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./pcf8563.ts:\n`````\nimport { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async init(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./pcf8563.ts`\n`````ts\nimport { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async init(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n\n`````\n\n-   `File ./main.ts`\n`````ts\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n\n`````\n\n-   `File ./README.md`\n`````md\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n`````\n\n","text":"File ./pcf8563.ts:\n`````\nimport { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async init(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n`````"}}}
{"sha":"bca11252e7f010cafbfca1563495fa22109299d4b55c028822a8908dd6dc13c0","key":{"template":{"id":"firmware","title":"firmware"},"fragment":{"fullId":"src/pcf8563.coarch.md:0:0","hash":"13a4442464ff3a2e"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/devicescript/src/pcf8563.ts","filename":"/workspaces/coarch/packages/devicescript/src/pcf8563.ts","type":"replace","range":[[0,0],[37,0]],"text":"import { I2CDriver } from \"@devicescript/drivers\";\n\nconst PCF8563_ADDR = 0x51;\n\nconst REG_CTRL1 = 0x00;\nconst REG_CTRL2 = 0x01;\nconst REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(addr: number = PCF8563_ADDR) {\n    super(addr);\n  }\n\n  protected async initDriver(): Promise<void> {\n    await this.writeReg(REG_CTRL1, 0x00);\n    await this.writeReg(REG_CTRL2, 0x00);\n  }\n\n  async readTime(): Promise<Date> {\n    const timeBuf = await this.readRegBuf(REG_TIME, 7);\n    const year = timeBuf[6] + 2000;\n    const month = timeBuf[5] & 0x1f;\n    const day = timeBuf[3] & 0x3f;\n    const hours = timeBuf[2] & 0x3f;\n    const minutes = timeBuf[1] & 0x7f;\n    const seconds = timeBuf[0] & 0x7f;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n"},{"label":"Update /workspaces/coarch/packages/devicescript/src/main.ts","filename":"/workspaces/coarch/packages/devicescript/src/main.ts","type":"replace","range":[[0,0],[11,0]],"text":"import { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n"},{"label":"Update /workspaces/coarch/packages/devicescript/src/README.md","filename":"/workspaces/coarch/packages/devicescript/src/README.md","type":"replace","range":[[0,0],[26,0]],"text":"# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n```\n\n## Sources\n\n- [Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n"}],"fileEdits":{"/workspaces/coarch/packages/devicescript/src/pcf8563.ts":{"before":"import { I2CDriver } from \"@devicescript/drivers\";\n\n// Constants (from datasheet)\nconst PCF8563_I2C_DEFAULT_ADDRESS = 0x51;\nconst PCF8563_REG_CONTROL1 = 0x00;\nconst PCF8563_REG_CONTROL2 = 0x01;\nconst PCF8563_REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(i2cAddress: number = PCF8563_I2C_DEFAULT_ADDRESS) {\n    super(i2cAddress);\n  }\n\n  /**\n   * Initialize the RTC.\n   */\n  async initDriver(): Promise<void> {\n    await this.writeByte(PCF8563_REG_CONTROL1, 0x00);\n    await this.writeByte(PCF8563_REG_CONTROL2, 0x00);\n  }\n\n  /**\n   * Read the time and return a JavaScript Date object.\n   * @returns {Promise<Date>} A JavaScript Date object.\n   */\n  async readTime(): Promise<Date> {\n    const data = await this.readBytes(PCF8563_REG_TIME, 7);\n    const year = data[6] + 2000;\n    const month = data[5] & 0x1F;\n    const day = data[3] & 0x3F;\n    const hours = data[2] & 0x3F;\n    const minutes = data[1] & 0x7F;\n    const seconds = data[0] & 0x7F;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n","after":"import { I2CDriver } from \"@devicescript/drivers\";\n\nconst PCF8563_ADDR = 0x51;\n\nconst REG_CTRL1 = 0x00;\nconst REG_CTRL2 = 0x01;\nconst REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(addr: number = PCF8563_ADDR) {\n    super(addr);\n  }\n\n  protected async initDriver(): Promise<void> {\n    await this.writeReg(REG_CTRL1, 0x00);\n    await this.writeReg(REG_CTRL2, 0x00);\n  }\n\n  async readTime(): Promise<Date> {\n    const timeBuf = await this.readRegBuf(REG_TIME, 7);\n    const year = timeBuf[6] + 2000;\n    const month = timeBuf[5] & 0x1f;\n    const day = timeBuf[3] & 0x3f;\n    const hours = timeBuf[2] & 0x3f;\n    const minutes = timeBuf[1] & 0x7f;\n    const seconds = timeBuf[0] & 0x7f;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n"},"/workspaces/coarch/packages/devicescript/src/main.ts":{"before":"import { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nawait main();\n","after":"import { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n"},"/workspaces/coarch/packages/devicescript/src/README.md":{"before":"# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\nImport the `PCF8563` class from the `pcf8563.ts` file and create an instance. Initialize the RTC and read the time using the `readTime()` method.\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n\n  const currentTime = await rtc.readTime();\n  console.log(`Current time: ${currentTime}`);\n}\n\nmain();\n```\n\n## Sources\n\n- [PCF8563 datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563 library](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n","after":"# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n```\n\n## Sources\n\n- [Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"firmware\" (`firmware`)\n\n```````````````js\n  1: prompt({\n  2:     title: \"firmware\",\n  3:     description: \"Compile information about various sources to generate DeviceScript driver.\",\n  4:     categories: [\"devicescript\"]\n  5: })\n  6: \n  7: def(\"SPEC\", env.file)\n  8: \n  9: $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n 10: Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n 11: \n 12: $`The base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\n 13: The symbols are in the '@devicescript/drivers' module.\n 14: \n 15: \\`\\`\\`ts\n 16: /**\n 17:  * A helper class to implement I2C drivers\n 18:  */\n 19: export abstract class I2CDriver {\n 20:     /**\n 21:      * Instantiate a driver\n 22:      * @param devAddr a 7 bit i2c address\n 23:      * @param options\n 24:      */\n 25:     constructor(devAddr: number, options?: I2CDriverOptions);\n 26: \n 27:     /**\n 28:      * Initializes the I2C device\n 29:      * @throws DriverError\n 30:      */\n 31:     async init(): Promise<void> {\n 32:         await this.initDriver()\n 33:     }\n 34: \n 35:     /**\n 36:      * Initializes the I2C device\n 37:      * @throws I2CError\n 38:      */\n 39:     protected abstract initDriver(): Promise<void>;\n 40: \n 41:     /**\n 42:      * Execute I2C transaction\n 43:      * @param devAddr a 7 bit i2c address\n 44:      * @param writeBuf the value to write\n 45:      * @param numRead number of bytes to read afterwards\n 46:      * @returns a buffer \"numRead\" bytes long\n 47:      */\n 48:     async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>;\n 49: \n 50:     /**\n 51:      * Write a byte to a register\n 52:      * @param devAddr a 7 bit i2c address\n 53:      * @param regAddr an 8 bit register address\n 54:      * @param byte the value to write\n 55:      * @throws I2CError\n 56:      */\n 57:     async writeReg(regAddr: number, byte: number): Promise<void>;\n 58: \n 59:     /**\n 60:      * read a byte from a register\n 61:      * @param devAddr a 7 bit i2c address\n 62:      * @param regAddr an 8 bit register address\n 63:      * @returns a byte\n 64:      * @throws I2CError\n 65:      */\n 66:     async readReg(regAddr: number): Promise<number>;\n 67:     /**\n 68:      * write a buffer to a register\n 69:      * @param devAddr a 7 bit i2c address\n 70:      * @param regAddr an 8 bit register address\n 71:      * @param b a byte buffer\n 72:      * @throws I2CError\n 73:      */\n 74:     async writeRegBuf(regAddr: number, b: Buffer): Promise<void>;\n 75:     /**\n 76:      * read a buffer from a register\n 77:      * @param devAddr a 7 bit i2c address\n 78:      * @param regAddr an 8 bit register address\n 79:      * @param size the number of bytes to request\n 80:      * @returns a byte buffer\n 81:      * @throws I2CError\n 82:      */\n 83:     async readRegBuf(regAddr: number, size: number): Promise<Buffer>;\n 84:     /**\n 85:      * read a raw buffer\n 86:      * @param devAddr a 7 bit i2c address\n 87:      * @param size the number of bytes to request\n 88:      * @returns a byte buffer\n 89:      * @throws I2CError\n 90:      */\n 91:     async readBuf(size: number): Promise<Buffer>;\n 92:     /**\n 93:      * write a raw buffer\n 94:      * @param devAddr a 7 bit i2c address\n 95:      * @param b a byte buffer\n 96:      * @throws I2CError\n 97:      */\n 98:     async writeBuf(b: Buffer): Promise<void>;\n 99: }\n100: \\`\\`\\`\n101: \n102: `\n103: \n104: $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.coarch.md`, '')}') that uses the driver \n105: and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n106: \n107: $`\n108: TypeScript style guidance:\n109: -  Use export keyboard on classes.\n110: -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n111: -  always await async functions or functions that return a Promise.\n112: -  Buffer is a similar type to Uint8Array\n113: `\n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.devicescript** missing\n\n\n## console output\n> tip: use `console.log()` from prompt.js files\n## Expanded prompt\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n-   [pcf8563.ts](./pcf8563.ts)\n-   [main.ts](./main.ts)\n-   [README.md](./README.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   generate device initialization sequence\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\n```ts\n/**\n * A helper class to implement I2C drivers\n */\nexport abstract class I2CDriver {\n    /**\n     * Instantiate a driver\n     * @param devAddr a 7 bit i2c address\n     * @param options\n     */\n    constructor(devAddr: number, options?: I2CDriverOptions);\n\n    /**\n     * Initializes the I2C device\n     * @throws DriverError\n     */\n    async init(): Promise<void> {\n        await this.initDriver()\n    }\n\n    /**\n     * Initializes the I2C device\n     * @throws I2CError\n     */\n    protected abstract initDriver(): Promise<void>;\n\n    /**\n     * Execute I2C transaction\n     * @param devAddr a 7 bit i2c address\n     * @param writeBuf the value to write\n     * @param numRead number of bytes to read afterwards\n     * @returns a buffer \"numRead\" bytes long\n     */\n    async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>;\n\n    /**\n     * Write a byte to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param byte the value to write\n     * @throws I2CError\n     */\n    async writeReg(regAddr: number, byte: number): Promise<void>;\n\n    /**\n     * read a byte from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @returns a byte\n     * @throws I2CError\n     */\n    async readReg(regAddr: number): Promise<number>;\n    /**\n     * write a buffer to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeRegBuf(regAddr: number, b: Buffer): Promise<void>;\n    /**\n     * read a buffer from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readRegBuf(regAddr: number, size: number): Promise<Buffer>;\n    /**\n     * read a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readBuf(size: number): Promise<Buffer>;\n    /**\n     * write a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeBuf(b: Buffer): Promise<void>;\n}\n```\n\nGenerate a README.md file (with filename starting with 'main/workspaces/coarch/packages/devicescript/src/pcf8563') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Buffer is a similar type to Uint8Array\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-HQIMPH`\n\n-   env.**file**\n```````````````js\n{ filename: \"/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.\"...,\nlabel: \"current\",\ncontent: \"# PCF8563\\n\\nThe PCF8563 peripherical is a real-time-clock (RT\"... }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"pcf8563.ts\",\n  filename: \"src/pcf8563.ts\",\n  content: \"import { I2CDriver } from \\\"@devicescript/drivers\\\";\\n\\n// Const\"... },\n{ label: \"main.ts\",\n  filename: \"src/main.ts\",\n  content: \"import { PCF8563 } from \\\"./pcf8563\\\";\\n\\nasync function main() \"... },\n{ label: \"README.md\",\n  filename: \"src/README.md\",\n  content: \"# PCF8563 DeviceScript Driver\\n\\nThis is a DeviceScript driver\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"firmware\",\n  title: \"firmware\",\n  description: \"Compile information about various sources to generate Device\"... },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"firmware\",\ntitle: \"firmware\",\ntext: \"<nothing yet>\",\njsSource: \"prompt({\\n    title: \\\"firmware\\\",\\n    description: \\\"Compile in\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/prompts/firmware.pr\"...,\ndescription: \"Compile information about various sources to generate Device\"...,\ncategories: [ \"devicescript\" ],\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: systemPrompt({ title: \"System prompt\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder ||\n  6:     \".\"\n  7: $`You are concise. Answer in markdown.\n  8: \n  9: When generating files you will use the following syntax:`\n 10: \n 11: def(`File ${folder}/file1.ts`, `What goes in\\n${folder}/file1.ts.`)\n 12: def(`File ${folder}/file2.md`, `What goes in\\n${folder}/file2.md.`)\n 13: \n 14: $`When generating files, place files in folder \"${folder}\". Do not respond unchanged files.`\n 15: \n 16: $`When explaining answers, take a deep breath.`\n 17: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n\nWhen generating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile ./file2.md:\n`````\nWhat goes in\n./file2.md.\n`````\n\nWhen generating files, place files in folder \".\". Do not respond unchanged files.\n\nWhen explaining answers, take a deep breath.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n```````````````markdown\nSPEC:\n````` file=/workspaces/coarch/packages/devicescript/src/pcf8563.coarch.md\n# PCF8563\n\nThe PCF8563 peripherical is a real-time-clock (RTC).\n\n-   [datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n-   [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n-   [pcf8563.ts](./pcf8563.ts)\n-   [main.ts](./main.ts)\n-   [README.md](./README.md)\n\n## Requiments\n\n-   the driver constructor should support a configurable I2C address\n-   add a function to read the time and return a javascript Date object\n-   generate device initialization sequence\n`````\n\nYou are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.\n\nThe base classes for I2C drivers are at https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts .\nThe symbols are in the '@devicescript/drivers' module.\n\n```ts\n/**\n * A helper class to implement I2C drivers\n */\nexport abstract class I2CDriver {\n    /**\n     * Instantiate a driver\n     * @param devAddr a 7 bit i2c address\n     * @param options\n     */\n    constructor(devAddr: number, options?: I2CDriverOptions);\n\n    /**\n     * Initializes the I2C device\n     * @throws DriverError\n     */\n    async init(): Promise<void> {\n        await this.initDriver()\n    }\n\n    /**\n     * Initializes the I2C device\n     * @throws I2CError\n     */\n    protected abstract initDriver(): Promise<void>;\n\n    /**\n     * Execute I2C transaction\n     * @param devAddr a 7 bit i2c address\n     * @param writeBuf the value to write\n     * @param numRead number of bytes to read afterwards\n     * @returns a buffer \"numRead\" bytes long\n     */\n    async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>;\n\n    /**\n     * Write a byte to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param byte the value to write\n     * @throws I2CError\n     */\n    async writeReg(regAddr: number, byte: number): Promise<void>;\n\n    /**\n     * read a byte from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @returns a byte\n     * @throws I2CError\n     */\n    async readReg(regAddr: number): Promise<number>;\n    /**\n     * write a buffer to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeRegBuf(regAddr: number, b: Buffer): Promise<void>;\n    /**\n     * read a buffer from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readRegBuf(regAddr: number, size: number): Promise<Buffer>;\n    /**\n     * read a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readBuf(size: number): Promise<Buffer>;\n    /**\n     * write a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeBuf(b: Buffer): Promise<void>;\n}\n```\n\nGenerate a README.md file (with filename starting with 'main/workspaces/coarch/packages/devicescript/src/pcf8563') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.\n\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Buffer is a similar type to Uint8Array\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFile ./pcf8563.ts:\n`````\nimport { I2CDriver } from \"@devicescript/drivers\";\n\nconst PCF8563_ADDR = 0x51;\n\nconst REG_CTRL1 = 0x00;\nconst REG_CTRL2 = 0x01;\nconst REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(addr: number = PCF8563_ADDR) {\n    super(addr);\n  }\n\n  protected async initDriver(): Promise<void> {\n    await this.writeReg(REG_CTRL1, 0x00);\n    await this.writeReg(REG_CTRL2, 0x00);\n  }\n\n  async readTime(): Promise<Date> {\n    const timeBuf = await this.readRegBuf(REG_TIME, 7);\n    const year = timeBuf[6] + 2000;\n    const month = timeBuf[5] & 0x1f;\n    const day = timeBuf[3] & 0x3f;\n    const hours = timeBuf[2] & 0x3f;\n    const minutes = timeBuf[1] & 0x7f;\n    const seconds = timeBuf[0] & 0x7f;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n```\n\n## Sources\n\n- [Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `File ./pcf8563.ts`\n`````ts\nimport { I2CDriver } from \"@devicescript/drivers\";\n\nconst PCF8563_ADDR = 0x51;\n\nconst REG_CTRL1 = 0x00;\nconst REG_CTRL2 = 0x01;\nconst REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(addr: number = PCF8563_ADDR) {\n    super(addr);\n  }\n\n  protected async initDriver(): Promise<void> {\n    await this.writeReg(REG_CTRL1, 0x00);\n    await this.writeReg(REG_CTRL2, 0x00);\n  }\n\n  async readTime(): Promise<Date> {\n    const timeBuf = await this.readRegBuf(REG_TIME, 7);\n    const year = timeBuf[6] + 2000;\n    const month = timeBuf[5] & 0x1f;\n    const day = timeBuf[3] & 0x3f;\n    const hours = timeBuf[2] & 0x3f;\n    const minutes = timeBuf[1] & 0x7f;\n    const seconds = timeBuf[0] & 0x7f;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n\n`````\n\n-   `File ./main.ts`\n`````ts\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n\n`````\n\n-   `File ./README.md`\n`````md\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n```\n\n## Sources\n\n- [Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n\n`````\n\n","text":"File ./pcf8563.ts:\n`````\nimport { I2CDriver } from \"@devicescript/drivers\";\n\nconst PCF8563_ADDR = 0x51;\n\nconst REG_CTRL1 = 0x00;\nconst REG_CTRL2 = 0x01;\nconst REG_TIME = 0x02;\n\nexport class PCF8563 extends I2CDriver {\n  constructor(addr: number = PCF8563_ADDR) {\n    super(addr);\n  }\n\n  protected async initDriver(): Promise<void> {\n    await this.writeReg(REG_CTRL1, 0x00);\n    await this.writeReg(REG_CTRL2, 0x00);\n  }\n\n  async readTime(): Promise<Date> {\n    const timeBuf = await this.readRegBuf(REG_TIME, 7);\n    const year = timeBuf[6] + 2000;\n    const month = timeBuf[5] & 0x1f;\n    const day = timeBuf[3] & 0x3f;\n    const hours = timeBuf[2] & 0x3f;\n    const minutes = timeBuf[1] & 0x7f;\n    const seconds = timeBuf[0] & 0x7f;\n\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n  }\n}\n`````\n\nFile ./main.ts:\n`````\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n`````\n\nFile ./README.md:\n`````\n# PCF8563 DeviceScript Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time-clock (RTC).\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nasync function main() {\n  const rtc = new PCF8563();\n  await rtc.init();\n  const currentTime = await rtc.readTime();\n  console.log(\"Current time:\", currentTime);\n}\n\nmain();\n```\n\n## Sources\n\n- [Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n`````"}}}
