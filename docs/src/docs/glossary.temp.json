{
  "markdown": "Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.",
  "Starlight": "Starlight is a project for building and authoring documentation websites using a combination of Astro and specific design principles.",
  "Astro": "Astro is a modern static site generator that enables developers to build optimized, fast websites using their preferred framework.",
  "samples": "The sample scripts are a collection of fully fledged scripts ready to use. They are designed to be used mostly as is, but we encourage you to tweak or modify them to suit your needs. Community contributions are welcome and can be found in the [Awesome Scripts](/genaiscript/samples/awesome) section.",
  "GenAIScript": "GenAIScript is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts to support their workflows. It allows users to author AI scripts (which we call a GenAIScript), debug those scripts in a development environment that is an extension of VS Code, and package those scripts in a command-line interface that can be deployed in many contexts.",
  "GitHub CodeSpaces": "If you are running GenAIScript from a GitHub CodeSpaces, you can skip the configuration step as the extension will automatically use GitHub Models.",
  "LLM": "LLM stands for a Large Language Model, which is utilized in GenAIScript for generating responses based on prompts.",
  "prompt variable": "Prompt variables in GenAIScript allow users to include content into the prompt and refer to it later in the script.",
  "foundation models": "Foundation models and LLMs (Large Language Models) are AI models that GenAIScript can interact with to perform tasks like generating text or processing information.",
  "WYSIWYG editors": "An application like Microsoft Word, where you click buttons to format words and phrases, and the changes are visible immediately.",
  "command palette": "The command palette is an interface in applications like Visual Studio Code that allows users to access commands quickly by typing or searching for them.",
  "cli": "Command Line Interface, a way to interact with a computer program by typing commands into a console or terminal instead of using a graphical user interface.",
  "script creation": "The process of generating a new script using specific commands or instructions in a programming or scripting environment.",
  "builtin tools": "Builtin tools refer to the set of predefined tools available in GenAIScript that allow users to perform various tasks without needing to create their own scripts from scratch.",
  "scripts": "Scripts provide a domain-specific JavaScript framework to build LLM requests.",
  "CLI": "Command Line Interface, a way to interact with a computer program by typing commands into a console or terminal instead of using a graphical user interface.",
  "Visual Studio Code Extension": "Visual Studio Code Extension provides a rich set of features to author, debug, and deploy GenAIScripts.",
  "command line": "GenAIScripts can be executed from the command line or run with a right-click context menu selection inside Visual Studio Code.",
  "prompt": "The prompt refers to the message or query that is sent to an LLM to generate a response.",
  "output": "The output refers to the response generated by the LLM after processing the initial prompt.",
  "GitHub Actions": "A continuous integration and continuous delivery (CI/CD) platform that allows you to automate the build, test, and deployment of your code in GitHub.",
  "GitHub Models": "AI models provided by GitHub that can be utilized for various tasks, such as code suggestions or content modifications, in repositories.",
  "script": "The script function is used to define the purpose and parameters of a GenAIScript.",
  "linter": "A tool that automatically checks code or text for errors and adherence to best practices.",
  "linting": "The process of using a linter to review and analyze code or text for potential issues, such as syntax errors or style inconsistencies.",
  "alt text": "Alt text is essential for making images accessible to everyone, including those with visual impairments. It provides a textual description of the image, allowing screen readers to convey the content to users who cannot see the image.",
  "gcm": "The `gcm` script provides a guided flow to create commits with generated messages. It starts by generating a commit message based on the staged changes in your Git repository using an [inline prompt](/genaiscript/reference/scripts/inline-prompts), and then asks the user to commit the changes or regenerate the message.",
  "gai": "The script that analyzes a GitHub Action Workflow Job log and attempts to determine the root cause of the issue. It collects relevant information, fills the context for the LLM, and allows an agent to reason and ask for more information as needed through tools.",
  "mermaid": "A JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions to create and render diagrams on the web.",
  "cmt": "The `cmt` script automates the process of adding comments to source code using an LLM and validates that the changes haven't introduced any code modifications. It involves generating comments, validating the output with various tools, and ensuring that only comments were changed.",
  "grumpy dev": "Let the grumpy senior dev review your code with this MCP server. See more at [GitHub](https://github.com/sinedied/grumpydev-mcp/blob/main/genaisrc/review-code.genai.js).",
  "GPVM": "A runtime system that given a GenAIScript executes the GenAIScript, which involves integrating the context into a prompt, calling the specified LLM, and extracting content from the LLM result.",
  "VS Code GenAIScript extension": "An add-in to VS Code that provides users with easy methods for creating, editing, running and debugging GenAIScript.",
  "warning code": "The `WarningCode` is a component in the Starlight project that visually highlights cautionary notes related to security risks and best practices.",
  "transparency note": "The Transparency Note is a document that outlines the capabilities and limitations of GenAIScript, helping users understand the context of its use and potential vulnerabilities.",
  "Visual Studio Code Workspace Trust": "Visual Studio Code Workspace Trust is a feature that determines the safety of running extensions, restricting them in certain modes (like Restricted Mode) to mitigate security risks.",
  "script files": "GenAIScript files that are JavaScript files named as `*.genai.mjs`, or TypeScript files named as `*.genai.mts`, with a prompt creation engine designed by LLM prompting.",
  "Playground": "The Playground is a self-hosted web application that allows you to run GenAIScript scripts from a friendly user interface. It sits between the GenAIScript CLI and the GenAIScript Visual Studio Code integration.",
  "envFile": "The final location of `envFile` will be used to load the secret in the environment variables. It supports a single.",
  "include": "The `include` property allows you to provide glob paths to include more scripts. Combined with a global configuration file, this allows to share scripts for a number of projects.",
  "modelAliases": "The `modelAliases` property allows you to provide aliases for model names.",
  "modelEncodings": "The `modelEncodings` property allows you to provide the encoding for the model.",
  "GenAIScript CLI": "The GenAIScript CLI **`genaiscript`** runs GenAIScript scripts outside of Visual Studio and in your [automation](/genaiscript/getting-started/automating-scripts).",
  "npx": "npx is a package runner tool that comes with npm, allowing users to execute packages without globally installing them.",
  "helpers scripts": "Helper scripts are scripts you can add to your `package.json` to ensure TypeScript definition files are written and updated.",
  "working behind a proxy": "Working behind a Proxy refers to the considerations taken when operating in an environment that requires network access through a proxy server.",
  "secrets": "The CLI will load the secrets from the environment variables or a `./.env` file, which are used for configuration.",
  "genaisrc": "The directory where new GenAIScript files are created.",
  "script model": "Run the `script model` command to list the available scripts and their model configuration, useful for diagnosing configuration issues.",
  "Azure AI Foundry": "GenAIScript has built-in support for various [Azure AI Foundry](https://learn.microsoft.com/en-us/azure/ai-foundry/) services.",
  "Azure AI Inference": "Deployment option supported by GenAIScript allowing inference on Azure AI services.",
  "Azure OpenAI Serverless": "Deployment option supported by GenAIScript for running OpenAI models in a serverless environment.",
  "Azure AI Serverless Models": "Deployment option supported by GenAIScript for utilizing AI models in a serverless context.",
  "Azure AI Search": "[Azure AI Search](https://learn.microsoft.com/en-us/azure/search/search-what-is-azure-search) is a powerful hybrid vector and keywords database search engine.",
  "Azure Content Safety": "[Azure Content Safety](https://learn.microsoft.com/en-us/azure/cognitive-services/content-safety/) is a service that helps you identify and filter out harmful content in your applications.",
  "Node.JS": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine, allowing developers to execute JavaScript on the server side.",
  "run": "The `run` function is used to execute a GenAIScript script in a Node.JS worker thread, allowing it to run without polluting the global scope or affecting the main process.",
  "metadata": "You can add a call to the `script` function to provides metadata about the script and the model. The metadata is used to display the script in the UI and configure the LLM model.",
  "task": "The `$` function is used to build the prompt text, it renders and writes the text to the prompt.",
  "defTool": "You can register JavaScript functions as tools that the LLM will call as needed.",
  "sub-prompt": "You can run nested LLMs to execute tasks on other, smaller models.",
  "test": "Tests are validations added in the `script` function to check the output of the script.",
  "testModels": "You can specify a set of models (and model aliases) to run the tests against, where each test is executed against each model.",
  "default files": "You can specify default file or files to run the script on. When you run the script from the script file itself, or with the command line without file arguments, the default files will be used.",
  "tasks": "The GenAIScript extension exposes each script as a Task automatically.",
  "analyze results": "By default, GenAIScript opens the output preview which shows a rendered view of the LLM output (assuming the LLM produces markdown).",
  "Visual Studio Code Marketplace": "The Visual Studio Code Marketplace contains the latest stable releases of extensions available for Visual Studio Code.",
  "debugging session": "The GenAIScript script files are executable JavaScript and can be debugged using the [Visual Studio Code Debugger](https://code.visualstudio.com/Docs/editor/debugging), just like any other JavaScript program.",
  "Markdown": "Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.",
  "apply-edits": "Add the `--apply-edits` flag to the CLI to automatically write the file edits.",
  "out": "Use the [cli](/genaiscript/reference/cli/run/) to run the script in a GitHub Action.",
  "out-trace": "Use the `out-trace` flag to output the trace to the summary file, `$GITHUB_STEP_SUMMARY`.",
  "TLA+": "A high-level language for modeling programs and systems--especially concurrent and distributed ones. It's based on the idea that the best way to describe things precisely is with simple mathematics.",
  "TLA+ AI Linter": "A GenAI script that uses LLMs to lint TLA+ files.",
  "release notes": "Typically based on the list of changes generated from commit messages since the last release.",
  "release-it": "An automation tool that helps streamline the process of creating releases and managing versions in projects.",
  "defImages": "The `defImages` function in GenAIScript is used to add an image file to the prompt context, allowing the LLM to analyze and generate descriptions related to that image.",
  "defFileOutput": "The `defFileOutput` function in GenAIScript defines the output route for a file, specifying how and where to save the generated content, such as alt text for images.",
  "MakeCode": "MakeCode is a web-based platform for creating engaging computer science learning experiences. It provides a block-based programming environment that allows students to create games, animations, and interactive stories.",
  "Localisation": "The process of adapting content for a specific region or language, ensuring that it is culturally appropriate and linguistically correct.",
  "Azure Bicep": "Azure Bicep is a Domain Specific Language (DSL) for deploying Azure resources declaratively. It is a language that is designed to be a more readable and maintainable way to define Azure resources.",
  "zod": "zod is a TypeScript-first schema validation with static type inference.",
  "video alt text": "The HTML video attribute does not have an `alt` attribute, but you can still attach an accessible description using the `aria-label` attribute.",
  "transcribe": "Function to generate the transcript, using the `transcription` model alias to compute a transcription. For OpenAI, it defaults to `openai:whisper-1`.",
  "ffmpeg": "An open-source software project that produces libraries and programs for handling multimedia data, including video frame extraction.",
  "Tavily": "Tavily is a search service optimized for LLMs that provides a [REST API](https://docs.tavily.com/docs/tavily-api/rest_api).",
  "Transformers.js": "HuggingFace [Transformers.js](https://huggingface.co/docs/transformers.js/index) is a JavaScript library that lets you run pretrained models locally on your machine. The library uses [onnxruntime](https://onnxruntime.ai/) to leverage the CPU/GPU capabilities of your hardware.",
  "onnxruntime": "onnxruntime is a runtime for executing machine learning models in the Open Neural Network Exchange (ONNX) format, providing cross-platform support and performance optimization.",
  "summarization": "The [summarization](https://huggingface.co/tasks/summarization) is a task that involves generating concise summaries of longer documents while retaining their main ideas.",
  "tool": "Using [tools (formerly functions)](/genaiscript/reference/scripts/tools), you can define a built-in agent that can take decisions and reasoning based on the tools provided to it.",
  "math-agent": "A port of https://ts.llamaindex.ai/examples/agent that can sum or divide two numbers using tools.",
  "def": "The `def` function lets you declare and assign LLM variables. The concept of variable is most useful to import context data, in particular files, and refer to them in the rest of the prompt.",
  "Automation": "The process of executing a GenAIScript script automatically across multiple files, usually facilitated by a shell or scripting language.",
  "GitHub Gists": "Gists is a lightweight way to share a couple files.",
  "starlight": "Starlight is a project for building and authoring documentation websites using a combination of Astro and specific design principles.",
  "webSearch": "The `webSearch` function in GenAIScript allows users to search for information on the web, returning a list of URLs for the results.",
  "fetchText": "The `fetchText` function in GenAIScript retrieves the content from a specified URL, often returning the data in HTML format.",
  "runPrompt": "The `runPrompt` function generates a prompt and communicates with an LLM to perform a task.",
  "GenAIScript Markdown Notebook": "The GenAIScript Markdown Notebook will parse the markdown document into a Notebook view and use Visual Studio Code's support to provide a rich editing experience. It should work with any markdown file as long as the code fence use \"```\".",
  "prompt as code": "GenAIScript lets you write prompts as a JavaScript program. GenAIScript runs your program",
  "def function": "The def function lets you declare and assign LLM variables. The concept of variable is most useful to import context data, in particular files, and refer to them in the rest of the prompt.",
  "env.files": "The `env.files` variable contains the list of files in context, which can be determined by a user selection in the UI, CLI arguments, or pre-configured like in this script.",
  "Filtering": "When using GenAIScript from the user interface, it is common to apply a script to an entire folder. This means that you'll get a bunch of files in env.files including some unneeded ones.",
  "slides.genai": "The script located in `genaisrc/slides.genai.js` that generates slides for presentation purposes.",
  "vscode-reveal": "An extension for Visual Studio Code that allows users to visualize slides created from Markdown files.",
  "Phi-3 Mini": "Phi-3 Mini is a 3.8B parameters, lightweight, state-of-the-art open model by Microsoft.",
  "Ollama": "Ollama is a desktop application that lets you download and run models locally.",
  "pdfjs": "Mozilla's pdfjs is a library used to extract text from PDF files, though it may produce garbled text or incorrect ordering of the text.",
  "OCR": "Optical Character Recognition (OCR) is an algorithm that reads rendered text from images, often applied to segments of an image.",
  "makeItBetter": "The `makeItBetter` function from the [GenAIScript runtime](/genaiscript/reference/scripts/runtime) improves code by repeatedly applying a set of instructions.",
  "defChatParticipant": "Registers a callback function that gets called on every chat turn during the AI interaction.",
  "llm-small": "Invokes smaller LLM. The \"small\" model is an alias that can be configured in the script metadata, CLI arguments, or environment variables.",
  "agent_file_system": "An agent that uses gpt-4o to execute LLM requests with tools that can search and read the file system. It can answer user questions in a concise manner, utilize wildcards and regex if needed, and ask for clarification if questions are ambiguous.",
  "agent": "An agent is a special kind of tool that uses an inline prompt and tools to solve a task.",
  "agent_fs": "An agent that reads or searches files.",
  "agent_git": "An agent that computes git diff to determine which changes may have broken the build.",
  "agent_github": "An agent that queries the GitHub API.",
  "Llama-guard3": "Llama-guard3 is a LLM model that specializes in detecting harmful content in text.",
  "issue-reviewer": "This guide shows how to automate reviewing issues with a GenAIScript that provides feedback and code analysis in GitHub Actions.",
  "GITHUB_ISSUE": "Needs to be configured in the GitHub Action from the `github.event.issue` object.",
  "Azure Blog Storage": "Azure Blog Storage is a service provided by Microsoft Azure for storing and managing large amounts of unstructured data, such as images or documents, in the cloud.",
  "image buffer": "The `image` buffer is a data structure that holds binary data for the downloaded image, enabling further processing in the script.",
  "knownledge generation": "the LLM is asked to generate a set of facts about the question.",
  "knownledge integration": "the LLM is asked a question augmented by the knowledge generated.",
  "PromptFoo": "PromptFoo is a platform that allows users to evaluate the outputs of their models by providing tools for performance comparison.",
  "tests": "The tests are added as an array of objects in the `tests` key of the `script` function, used to validate the output of the script.",
  "DeepSeek": "GenAIScript supports [DeepSeek V3](https://www.deepseek.com/) through their OpenAI API.",
  "DeepSeek-R1": "An advanced large language model (LLM) that has gained significant attention for its performance and cost-effectiveness.",
  "DeepSeek-V3": "An advanced large language model (LLM) that has gained significant attention for its performance and cost-effectiveness.",
  "containerized-tools": "This guide shows how to create a [tool](/genaiscript/reference/scripts/tools) that call an executable in a [container](/genaiscript/reference/scripts/container). This is a flexible and secure way to run tools that may have dependencies or security concerns.",
  "Vision model": "You will need access to a deployment of the OpenAI vision model. In this example, it is identifier by `gpt-4o`. Also set the `maxTokens` to 4000 to ensure the model can process the entire business card.",
  "defImage": "The [defImage](/genaiscript/reference/scripts/images) function can be used to input multiple files to the script. The non-image files will automatically be ignored, so you can typically pass [env.files](/genaiscript/reference/scripts/context) directly to `defImages`.",
  "defSchema": "The `defSchema` function allows you to add data format validation by defining a schema for the data structure, such as business data rows.",
  "```ini": true,
  "image file": "An image file is a file format that contains visual information such as photographs, graphics, charts, etc. It is used as input in GenAIScript to process and analyze visual content.",
  "```": true,
  "Agentic": "Agentic is a standard library of TypeScript AI tools optimized for both TS-usage as well as LLM-based usage, which is really important for testing and debugging.",
  "agentic tools": "The full list of agentic tools, which can be found at [https://agentic.so/tools/](https://agentic.so/tools), includes functionalities for various purposes such as [Bing](https://agentic.so/tools/bing), [Calculator](https://agentic.so/tools/calculator), [Clearbit](https://agentic.so/tools/clearbit), and many others.",
  "weather tool": "The weather tool uses the [https://www.weatherapi.com/](https://www.weatherapi.com/) APIs to provide weather information.",
  "Zine": "\"Zine\" is a popular graphic art form that combines text and images to tell a story.",
  "Sketchnotes": "\"Sketchnotes\" is another style of visual note-taking that combines hand-drawn elements with text to convey information.",
  "webview: A webview is a component that allows a web-based interface to be embedded within applications, providing an interactive experience and additional functionalities for rendering content, such as markdown subformats.": true,
  "serve: The `serve` command is used to start a server that hosts scripts, allowing them to be run in a web browser or any other webview-capable application.": true,
  "podcast": "A digital audio file series available for streaming or download, typically designed for episodic listening.",
  "video_extract_frames": "The tool that allows users to extract frames from video files for further analysis.",
  "agent_video": "An agent that works on video files, automating tasks like frame extraction and analysis through LLMs.",
  "YouTube": "YouTube is a video-sharing platform where users can upload, view, and share videos. It is one of the most popular social media platforms for video content.",
  "BlogNarration": "BlogNarration is a component in GenAIScript documentation that provides narrated content for blog posts, enhancing the reading experience with added audio.",
  "Search And Transform": "Search and Transform is a twist on the same concept, but we use an LLM to perform the transformation instead of a simple string replacement.",
  "MCP": "Model Context Protocol, a framework aiming to enhance development processes by allowing scripting tools to be integrated with AI applications.",
  "MCP tools": "Tools exposed by GenAIScript that function similarly to LLM tools, allowing the Language Model (LLM) to determine when to call them for more efficient development.",
  "o1": "GenAIScript supports the various flavors of the [OpenAI o1](https://openai.com/o1/) models (mini, preview, ...). It also adds support for tools. o1 is also available on [GitHub Models](https://github.com/marketplace/models/azure-openai/o1/playground)!",
  "API": "Application Programming Interface, a set of rules that allows different software entities to communicate with each other.",
  "Model Context Protocol": "MCP is a framework aiming to enhance development processes by allowing scripting tools to be integrated with AI applications.",
  "rug pull": "An attack where the list of tools is modified without the user's knowledge, potentially leading to harmful outcomes.",
  "tool poisoning": "An attack that aims to compromise a tool's functionality or outputs, potentially manipulating it to behave maliciously.",
  "prompt injection": "An attack technique in which an attacker exploits a program by injecting malicious prompts, affecting its behavior and output.",
  "content safety scanner": "A tool that scans content to detect risks such as tool poisoning and prompt injection, ensuring safer interactions.",
  "MCP resources": "Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.",
  "publishResource": "The `publishResource` method allows you to publish a resource with a unique identifier and a file/string/buffer. The rest of the MCP resource publishing process is handled by the GenAIScript framework.",
  "intent validation": "The goal to detect when a tool behaves (wildly) outside of its expected behavior.",
  "mcpAgentServers": "The `mcpAgentServers` property allows users to configure MCP servers in the script metadata, wrapping them with agents for running multiple MCP servers in parallel, each with its own agent.",
  "mcpServers": "The `mcpServers` property allows users to inject the MCP server directly in the prompt without using the agent abstraction.",
  "user interaction agent": "An agent that enables the agent to ask questions to the user.",
  "Hugging Face Transformers.js": "Hugging Face Transformers.js is a JavaScript library that provides a simple way to run LLMs in the browser or node.js (or Bun, Deno, ...).",
  "gpt-image-1": "The new OpenAI image generation model that can create images based on prompts, now supported in GenAIScript and accessible through OpenAI's API or Azure AI Foundry.",
  "GITHUB_TOKEN": "The authentication token used in GitHub Actions to authenticate requests to [GitHub Models](https://github.com/marketplace/models).",
  "GistPad": "GistPad allows you to create, edit, and manage your Gists directly from within VS Code.",
  "fallback tools": "With GenAIScript 1.72.0, we introduce the concept of **fallback tools**. Basically, it consists of a [system script](/genaiscript/reference/scripts/system",
  "tool example": "Here is an example of a tool that generates a random number between 0 and 1.",
  "random": "Generate a random number",
  "speak": "The `speak` function generates audio narration from text and voice instructions.",
  "workspace": "The `workspace` handles file operations safely in GenAIScript.",
  "retrieval": "The `retrieval` APIs has been extended to support [Azure AI Search](https://learn.microsoft.com/en-us/azure/search/search-what-is-azure-search). This allows you to index files using embeddings into a vector database that can be used for similarity search. This is commonly referred to as Retrieval Augmented Generation (RAG).",
  "RAG": "Retrieval Augmented Generation (RAG) refers to a technique that combines retrieval and generation processes, enhancing the results by incorporating contextual information from indexed data.",
  "playwright": "Playwright is a browser automation library that allows loading, interacting with, and inspecting web pages.",
  "ast-grep": "ast-grep(sg) is a fast and polyglot tool for code structural search, lint, rewriting at large scale. **sg** provides us the AST-search-and-replace capabilities we need to implement the strategy above.",
  "Anthropic": "Anthropic is a model supported in the GenAIScript framework, with contributions and ongoing discussions available in the GitHub repository.",
  "LLM tools": "Register JavaScript functions as LLM tools (with fallback for models that don't support tools).",
  "blog narration": "BlogNarration is a component in GenAIScript documentation that provides narrated content for blog posts, enhancing the reading experience with added audio.",
  "file search": "Grep or fuzz search files.",
  "web search": "Web search using Bing or Tavily.",
  "browser automation": "Browse and scrape the web with Playwright.",
  "About mixing files and --vars": "Order of CLI arguments for specifying files and variables.",
  "Additional flags": "Repo clone flags: `--remote-branch <branch>` to specify branch, `--remote-force` to force overwrite, `--remote-nstall` to install dependencies after cloning.",
  "Authentication": "Supports secrets via environment variables and Microsoft Entra authentication.",
  "Azure OpenAI and AI services": "GenAIScript can run inference on the LLMs hosted in the Azure AI Foundry.",
  "Capabilities": "Lets teams, including non-developers, create and debug AI-enhanced JavaScript scripts calling LLMs and foundation models.",
  "Compile scripts": "Runs TypeScript compiler to check scripts for errors.",
  "debugging": "Enable the debug category in config to view more information on configuration resolution.",
  "Foundation models and LLMs": "While GenAIScript currently supports different LLMs, in the future we anticipate that we will incorporate additional foundation models beyond large language models.",
  "Helper scripts": "`package.json` entries ensuring correct TypeScript definition file generation for scripts.",
  "Launching": "From the workspace root, run `npx --yes genaiscript serve` and go to the provided URL (typically `http://127.0.0.1:8003/`).",
  "List of script configuration": "Lists scripts and model configurations for CI/CD troubleshooting.",
  "Listing model configuration": "Lists available scripts and model configurations for CI/CD troubleshooting.",
  "Remote repository": "Playground can run scripts from a remote repository using current `.env` secrets.",
  "Running scripts from a remote repository": "Use `--remote` to load and run scripts from a remote repository via shallow clone.",
  "Transparency Note": "The Transparency Note is a document that outlines the capabilities and limitations of GenAIScript, helping users understand the context of its use and potential vulnerabilities.",
  "Using the CLI as a Node.JS API": "Import and use GenAIScript CLI as an API in Node.JS.",
  "StatusCode": "An enumeration of common HTTP status codes that may occur when interfacing with web APIs.",
  "API Key": "A unique identifier used to authenticate a user or an application when making API calls.",
  "webCode": "Code-related to web development, including HTML, CSS, and JavaScript snippets for web projects.",
  "fallback tool": "Allows the GenAIScript to specify a backup tool that is used if the primary tool fails.",
  "setup": "You can open this repo in GitHub CodeSpace/Docker to get the build environment needed.",
  "manual setup": "Install [Node.JS LTS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).",
  "pull requests": "You must create pull requests against the `dev` branch. The `main` branch is reserved for releases.",
  "running local scripts": "To run a script using the locally built cli.",
  "debugging local scripts": "Open a `JavaScript Debug Terminal` and launch the script.",
  "logging": "GenAIScript uses the [debug](https://www.npmjs.com/package/debug) library for logging.",
  "web viewer": "The web application (React 19) is meant to run both as a Visual Studio Code panel and a standalone viewer (**playground**).",
  "visual studio code extension development": "Working on the VSCode involves launching the main project debugger, which opens a second VSCode instance with the GenAIScript extension.",
  "caveats": "Launching the debugger sometimes fails but still unknown reasons.",
  "dependencies": "Run `yarn install:force` to refresh the lock file.",
  "docs": "Run `docs` to launch the documentation site.",
  "slides": "All files `slides/*slides.md` will be compiled and deployed on build.",
  "genaiscripts": "Commit with auto-generated message, add doc to new or updated apis, generate images for blog posts.",
  "packaging": "To compile and package the Visual Studio Code extension, run the `package` script.",
  "release": "Run the `release` script.",
  "contributing": "This project welcomes contributions and suggestions.",
  "Search and Transform": "Search and Transform is a twist on the same concept, but we use an LLM to perform the transformation instead of a simple string replacement.",
  "parameters": "Parameters are inputs that define how a GenAIScript operates, specifying values required for execution.",
  "glob": "Glob is a string that defines a set of filenames with wildcard patterns used to match files in a directory structure.",
  "pattern": "Pattern refers to the text or regular expression that is being searched for in files.",
  "transform": "Transform indicates the LLM transformation that is applied to the matches found in file content.",
  "cancel": "The cancel function stops the execution of a script, typically with an error message indicating the reason.",
  "regex": "Regular expressions, often referred to as regex, are sequences of characters that define a search pattern, mainly used for string matching.",
  "grep": "The grep function in the workspace API searches for files matching a given pattern or regex.",
  "patches": "The patches object stores computed transformations to avoid redundant work during the script execution.",
  "newContent": "New content refers to the modified text in files after applying transformations.",
  "GitHub Token": "The authentication token used in GitHub Actions to authenticate requests to [GitHub Models](https://github.com/marketplace/models).",
  "content safety": "Refers to measures taken to ensure that generated content does not include harmful or inappropriate material.",
  "pull request": "A request to merge changes from one branch into another in a Git repository, typically initiated through a code review process.",
  "git": "Git is a distributed version control system that tracks changes in source code during software development.",
  "GIT_DIFF": "A variable that stores the differences (diff) between two versions of files in a Git repository.",
  "JSON": "JavaScript Object Notation, a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate.",
  "Universal Linter": "An automated tool that reviews and reports on the correctness and style of both code and natural language files, leveraging LLMs to inspect code or documents.",
  "lint": "The process of reviewing and identifying issues in code or text to adhere to best practices and improve quality.",
  "Alt text": "Alt text is essential for making images accessible to everyone, including those with visual impairments. It provides a textual description of the image, allowing screen readers to convey the content to users who cannot see the image.",
  "Markdown files": "Markdown files are documents that use the Markdown syntax to format text.",
  "image assets": "Image assets refer to the image files stored in a specified location that can be used in documents or applications.",
  "diagram": "This sample analyzes all the code in context and attempts to generate a diagram using [mermaid](https://mermaid.js.org/).",
  "formatters": "Tools that standardize the visual appearance of code, ensuring consistency and adherence to styling rules.",
  "git diff": "A command in Git that shows the changes between commits, commit and working tree, etc.",
  "Grumpy Dev": "Let the grumpy senior dev review your code with this MCP server",
  "extension": "GenAIScript is supported by a Visual Studio Code extension that provides a rich set of features to author, debug, and deploy GenAIScripts.",
  "Copilot Chat Integration": "Integrates with GitHub Copilot Chat to enhance the scripting experience.",
  "GenAIScript files": "Files with a `.genai.mjs`, `.genai.js`, or `.genai.mts` extension that are detected and utilized within GenAIScript.",
  "system.*.genai.mjs": "Files considered as [system prompt templates](/genaiscript/reference/scripts/system) and are unlisted by default.",
  "npm": "Node Package Manager, a package manager for JavaScript, used to install and manage packages for Node.js applications.",
  "GenAIScript API": "A set of rules that allows different software entities to communicate with each other within the GenAIScript framework.",
  "vanilla Node.JS": "The standard Node.JS environment without modifications or additional functionalities specific to GenAIScript.",
  "worker thread": "A separate thread in Node.JS that allows for concurrent operation while avoiding pollution of global variables and side effects.",
  "context": "The context refers to the data or information that is available and relevant to the execution of a script, which can influence how the prompt is generated and interpreted.",
  "FILES": "The variable that holds the list of files that the script will review or analyze, typically derived from the execution environment.",
  "visual studio code": "An integrated development environment that allows users to write and debug code using various programming languages, including JavaScript.",
  "GitHub Copilot Chat": "A feature in Visual Studio Code that allows users to interact with AI-powered code suggestions and assistance.",
  "playground": "A self-hosted web application that allows users to run GenAIScript scripts from a friendly user interface.",
  "DevContainer": "You can add this file in your project to use GenAIScript in a [DevContainer](https://containers.dev/), it contains a minimum of tools to get started..",
  "GitHub Action": "GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.",
  "video frame extraction": "The process of capturing specific frames from a video file for further analysis, often used in conjunction with transcription to gain insights from the visual content.",
  "transcription": "The process of converting speech from video or audio files into text format, allowing for better analysis and accessibility.",
  "aria-label": "An HTML attribute that provides an accessible description for an element, especially in cases where no relevant alternative text attribute exists, such as the `alt` attribute for images.",
  "TAVILY_API_KEY": "The secret needed for accessing the Tavily search service, which should be declared in the script and added to the `.env` file.",
  "tavily": "An advanced search service optimized for LLMs that provides a [REST API](https://docs.tavily.com/docs/tavily-api/rest_api).",
  "tavilySearch": "The function that wraps the `fetch` call to Tavily, searching for information using a given query.",
  "pipeline": "In the context of Transformers.js, a [pipeline](https://huggingface.co/docs/transformers.js/api/pipelines",
  "Git submodules": "A feature in Git that allows you to incorporate and manage repositories as subdirectories within a parent repository, enabling sharing of library or script files across multiple projects.",
  "Gists": "A lightweight way to share files or snippets of code on GitHub, allowing users to easily create and manage individual files.",
  "$": "The `$` function formats the strings and write them to the user message. This user message is added to the chat messages and sent to the LLM API.",
  "filtering": "The process of applying a script to an entire folder, which may include unwanted files among those in `env.files`. The `def` function provides various options to filter the files, like the `endsWith` option.",
  "maxTokens": "An option in the `def` function that trims the content size to a specified number of tokens, as the LLM context is finite.",
  "CODE": "This line defines a constant named \"CODE\" that represents the files in the environment, setting up the context for the code that needs improvement.",
  "inline prompts": "Inline prompts are predefined text inputs that can be utilized to execute specific tasks or commands in GenAIScript.",
  "tools": "Tools are predefined scripts or functions that perform specific tasks within GenAIScript, often requiring user input or utilizing LLM models to execute prompts."
}