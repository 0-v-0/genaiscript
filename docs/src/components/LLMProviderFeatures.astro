---
import LLMS from "../../../packages/core/src/llms.json"

interface Props {
    provider: string
}
const { provider } = Astro.props
const info: Record<string, boolean> & { openaiCompatibility?: string, limitations?: boolean } =
    LLMS.providers.find(({ id }) => id === provider) as any
if (!info) {
    throw new Error(`Provider ${provider} not found`)
}
const features: Record<string, { name?: string; url?: string }> = {
    seed: {
        name: "Seed ignored",
    },
    topP: {
        name: "top_p ignored",
    },
    logprobs: {
        name: "logprobs (and top logprobs) ignored",
    },
    topLogrobs: {
        name: "Top logprobs ignored",
    },
    tools: {
        name: "Tools implemented as fallback tools automatically.",
    },
}
const { openaiCompatibility, limitations, ...rest } = info
const unsupported = Object.keys(rest)
    .sort()
    .map((id) => ({ id, supported: info[id] }))
    .filter(({ supported }) => supported === false)
---

{
    openaiCompatibility || limitations || unsupported?.length > 0 ? (
        <>
            <h3>Limitations</h3>
            <ul>
                {!!limitations && <li>{limitations}</li>}
                {!!openaiCompatibility && (
                    <li>
                        Uses <a href={openaiCompatibility}>OpenAI compatibility layer</a>
                    </li>
                )}
                {Object.keys(features)
                    .map((id) => ({ id, supported: info[id] }))
                    .filter(({ supported }) => supported === false)
                    .map(({ id }) => (
                        <li>{features[id]?.name || id}</li>
                    ))}
            </ul>
        </>
    ) : null
}
