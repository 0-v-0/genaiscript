{
  "term": "GenAIScript: GenAIScript is a scripting language integrating LLMs into scripts using simplified JavaScript syntax.",
  "Astro": "Astro is a modern static site generator focused on performance and ease of use for building fast websites and apps.",
  "Starlight": "Starlight is a documentation framework built on Astro, optimized for technical documentation.",
  ".md": "Markdown file format for authoring content with easy formatting and structure.",
  ".mdx": "MDX is Markdown extended with embedded React components.",
  "agents-oct2024": "[agents-oct2024](https://microsoft.github.io/genaiscript/slides/agents-oct2024/)",
  "ast": "[ast](https://microsoft.github.io/genaiscript/slides/ast/)",
  "default": "[default](https://microsoft.github.io/genaiscript/slides/default/)",
  "eng-july2024": "[eng-july2024](https://microsoft.github.io/genaiscript/slides/eng-july2024/)",
  "feb2025": "[feb2025](https://microsoft.github.io/genaiscript/slides/feb2025/)",
  "garage-august2024": "[garage-august2024](https://microsoft.github.io/genaiscript/slides/garage-august2024/)",
  "msr-eng-may2024": "[msr-eng-may2024](https://microsoft.github.io/genaiscript/slides/msr-eng-may2024/)",
  "networking-apr2024": "[networking-apr2024](https://microsoft.github.io/genaiscript/slides/networking-apr2024/)",
  "overview-june2024": "[overview-june2024](https://microsoft.github.io/genaiscript/slides/overview-june2024/)",
  "overview-may2024": "[overview-may2024](https://microsoft.github.io/genaiscript/slides/overview-may2024/)",
  "pnw-plse-may2024": "[pnw-plse-may2024](https://microsoft.github.io/genaiscript/slides/pnw-plse-may2024/)",
  "seattlejs-jan2025": "[seattlejs-jan2025](https://microsoft.github.io/genaiscript/slides/seattlejs-jan2025/)",
  "vs-aua": "[vs-aua](https://microsoft.github.io/genaiscript/slides/vs-aua/)",
  "slides": "https://microsoft.github.io/genaiscript/slides/",
  "samples": "Sample GenAIScripts, ready to use and modify, including community [Awesome Scripts](/genaiscript/samples/awesome).",
  "Awesome Scripts": "Community-contributed scripts, accessible in the Awesome Scripts documentation section.",
  "Scripts": "Scripts provide a domain-specific JavaScript framework to build LLM requests.",
  "CLI": "Command-line interface for automating GenAIScript executions. See [CLI](/genaiscript/reference/cli).",
  "Visual Studio Code Extension": "Offers features to author, debug, and deploy GenAIScripts within Visual Studio Code. See [Visual Studio Code Extension](/genaiscript/reference/vscode).",
  "prompt variable": "Allows inclusion of content into a prompt for later reference in GenAIScript.",
  "files parameters": "Allow scripts to target one or multiple files, enhancing reusability.",
  "tools": "JavaScript callbacks registered with the LLM to execute code, search the web, or read files.",
  "agents": "GenAIScript's abstraction layer that combines LLMs with tools for tasks like file system and repository queries.",
  "foundation models": "Foundation models and LLMs are large AI models used for text generation and information processing in GenAIScript.",
  "Markdown": "Lightweight markup language for formatting plaintext, popular for documentation. Created by John Gruber in 2004.",
  "script generation": "Creating scripts to automate tasks using GenAIScript commands.",
  "command palette": "Interface in Visual Studio Code for quickly executing commands via search.",
  "Builtin tools": "Built-in GenAIScript tools for data fetching, file operations, and repository management.",
  "fetch": "Fetches data from allowed domains.",
  "fs_ask_file": "Runs an LLM query over file contents to extract information.",
  "fs_data_query": "Queries data in a file using GROQ syntax.",
  "fs_diff_files": "Computes a diff between two files. Use git diff for file version comparison.",
  "fs_find_files": "Finds files by glob pattern and optionally regex in content. Use cautiously with many files.",
  "fs_read_file": "Reads a file as text",
  "git_branch_default": "Gets the default branch from the client.",
  "git_branch_current": "Gets the current branch.",
  "git_branch_list": "Lists all repository branches.",
  "git_list_commits": "Displays repository commit history via git log.",
  "git_status": "Shows repository status.",
  "git_last_tag": "Gets the latest tag from the repository.",
  "git_diff": "Computes file diffs via git diff",
  "github_actions_workflows_list": "Lists all GitHub Actions workflows.",
  "github_actions_jobs_list": "Lists all jobs for a workflow run.",
  "github_actions_job_logs_get": "Downloads a GitHub workflow job log",
  "github_actions_job_logs_diff": "Diffs two GitHub workflow job logs.",
  "github_files_get": "Gets a file from a GitHub repository.",
  "github_files_list": "Lists all files in a GitHub repository.",
  "github_issues_list": "Lists all issues in a repository.",
  "github_issues_get": "Gets a single issue by number.",
  "github_issues_comments_list": "Lists all comments for an issue.",
  "github_pulls_list": "Lists all pull requests in a repository.",
  "github_pulls_get": "Gets a single pull request by number.",
  "github_pulls_review_comments_list": "Lists review comments for a pull request.",
  "math_eval": "Evaluates mathematical expressions. Always use this tool for calculations.",
  "md_find_files": "Gets the file structure and metadata of Markdown/MDX docs. Can search content by regex.",
  "md_read_frontmatter": "Reads frontmatter of Markdown or MDX files.",
  "meta_prompt": "Applies OpenAI meta prompt guidelines to a user prompt. Based on [OpenAI docs](https://platform.openai.com/docs/guides/prompt-generation?context=text-out).",
  "meta_schema": "Generates a valid JSON schema for described JSON. See [OpenAI docs](https://platform.openai.com/docs/guides/prompt-generation?context=structured-output-schema).",
  "node_test": "Builds and tests the project with `npm test`.",
  "python_code_interpreter_run": "Executes Python 3.12 code for analysis in a docker container. No network. Only core scientific packages available.",
  "python_code_interpreter_copy_files_to_container": "Copies files from workspace to container (relative paths only).",
  "python_code_interpreter_read_file": "Reads a file from the Python container (no absolute paths).",
  "retrieval_fuzz_search": "Fuzzy keyword search within files.",
  "retrieval_vector_search": "Embeddings-based similarity search across files.",
  "retrieval_web_search": "Searches the web for queries using Tavily or Bing Search.",
  "think": "Appends a reasoning step to the log for complex thoughts or memory caching.",
  "transcribe": "Transcribes audio or video files using speech-to-text.",
  "user_input_confirm": "Requests user confirmation for a message.",
  "user_input_select": "Prompts user to select an option.",
  "user_input_text": "Prompts user to input text.",
  "video_probe": "Returns metadata for a video file.",
  "video_extract_audio": "Extracts audio from video and returns audio filename.",
  "video_extract_clip": "Extracts a video clip and returns filename.",
  "video_extract_frames": "Extracts frames from a video file.",
  "vision_ask_images": "Uses vision models to query images.",
  "z3": "Solves SMTLIB2 problems using the Z3 constraint solver.",
  "agent data": "Agent that queries data from files.",
  "agent docs": "Agent that queries the documentation.",
  "agent fs": "Agent for file system queries using LLM and tools for file operations.",
  "agent git": "Agent for repository queries using Git with full context.",
  "agent github": "Agent for GitHub queries and operations.",
  "agent interpreter": "Agent for running code interpreters (Python, Math).",
  "agent planner": "Agent for generating plans to complete tasks.",
  "agent user_input": "Agent for asking user input (confirm, select, answer).",
  "agent video": "Agent to analyze and process video files or URLs.",
  "agent web": "Agent for web search tasks.",
  "agent z3": "Agent for formalizing and solving problems with the Z3 constraint solver.",
  "agent_fs": "File system agent that combines LLM with tools for querying and modifying files.",
  "search and transform": "Uses LLMs for text transformations based on patterns, beyond search and replace.",
  "script": "Defines a sequence of commands in GenAIScript, including title, description, and parameters.",
  "workspace": "GenAIScript environment for file operations, searching, reading, and writing.",
  "grep": "Function to search workspace files by glob or regex pattern.",
  "runPrompt": "Function to create LLM prompts, defining context and the desired transformation.",
  "patches": "Object in a script holding computed edits for unique content matches.",
  "content": "Text or data read from a file, subject to transformation.",
  "newContent": "Modified file content after applying transformations.",
  "presentation_2024": "Series of GenAIScript presentations on topics like engineering, networking, and system prompts.",
  "system prompts": "Prompts to guard against harmful content and jailbreaking. See [Content Safety](/genaiscript/reference/scripts/content-safety).",
  "development environment": "Tools and settings for building and testing software.",
  "React 19": "Current version of React used, providing minimal dependencies.",
  "vscode-elements": "Design system that mimics Visual Studio Codeâ€™s look and feel.",
  "Create Script snippet": "Guidance for creating scripts in editors using GenAIScript commands.",
  "builtin_tools": "Set of built-in tools used in system prompts for fetching data, file ops, and command execution.",
  "prompting is coding": "Programmatically assemble prompts for LLMs using JavaScript, orchestrate LLMs, tools, and data.",
  "next steps": "Instructions for installing the extension or CLI, configuring LLMs, writing scripts, and reading documentation.",
  "latest news": "Recent updates or blog posts on GenAIScript.",
  "features": "Core functionalities that enable effective prompt tooling in GenAIScript.",
  "case studies": "Real-world usage examples of GenAIScript.",
  "guides": "Instructional materials to improve scripting skills.",
  "llm friendly docs": "Documentation formatted for optimal LLM crawler accessibility.",
  "Pull Requests": "Create pull requests against the `dev` branch",
  "Debugging local scripts": "Open a JavaScript Debug Terminal and run the script with specific yarn commands.",
  "Dependencies": "Run `yarn install:force` to refresh the lock file.",
  "Docs": "Run `docs` to launch the documentation site and check for broken links.",
  "Slides": "All `slides/*slides.md` files are compiled and deployed on build",
  "Contributing": "Project welcomes contributions",
  "schemas": "GenAIScript supports output formats like file edits, JSON, and user-defined schemas. See [Schemas](/genaiscript/reference/scripts/schemas).",
  "translation": "Document translation case study: [Translation Case Study](/genaiscript/case-studies/documentation-translations).",
  "best practices": "See [Best Practices](/genaiscript/getting-started/best-practices) for advice on script writing and usage."
}